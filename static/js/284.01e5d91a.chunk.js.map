{"version":3,"file":"static/js/284.01e5d91a.chunk.js","mappings":"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","sources":["../node_modules/common/lib/backend-impl.ts","../node_modules/common/lib/backend.ts","../node_modules/common/lib/version.ts","../node_modules/common/lib/env-impl.ts","../node_modules/common/lib/env.ts","../node_modules/common/lib/tensor-conversion-impl.ts","../node_modules/common/lib/tensor-factory-impl.ts","../node_modules/common/lib/tensor-impl-type-mapping.ts","../node_modules/common/lib/tensor-utils-impl.ts","../node_modules/common/lib/tensor-impl.ts","../node_modules/common/lib/tensor.ts","../node_modules/common/lib/trace.ts","../node_modules/common/lib/inference-session-impl.ts","../node_modules/common/lib/inference-session.ts","../node_modules/common/lib/tensor-conversion.ts","../node_modules/common/lib/tensor-factory.ts","../node_modules/common/lib/onnx-model.ts","../node_modules/common/lib/onnx-value.ts","../node_modules/common/lib/training-session-impl.ts","../node_modules/common/lib/training-session.ts","../node_modules/common/lib/index.ts","../node_modules/onnxruntime-web/lib/onnxjs/instrument.ts","../node_modules/onnxruntime-web/lib/onnxjs/opset.ts","../node_modules/onnxruntime-web/node_modules/guid-typescript/dist/guid.js","../node_modules/onnxruntime-web/node_modules/long/index.js","../node_modules/onnxruntime-web/node_modules/flatbuffers/js/flatbuffers.mjs","../node_modules/onnxruntime-web/lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","../node_modules/onnxruntime-web/node_modules/@protobufjs/aspromise/index.js","../node_modules/onnxruntime-web/node_modules/@protobufjs/base64/index.js","../node_modules/onnxruntime-web/node_modules/@protobufjs/eventemitter/index.js","../node_modules/onnxruntime-web/node_modules/@protobufjs/float/index.js","../node_modules/onnxruntime-web/node_modules/@protobufjs/inquire/index.js","../node_modules/onnxruntime-web/node_modules/@protobufjs/utf8/index.js","../node_modules/onnxruntime-web/node_modules/@protobufjs/pool/index.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/util/longbits.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/util/minimal.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/writer.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/writer_buffer.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/reader.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/reader_buffer.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/rpc/service.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/rpc.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/roots.js","../node_modules/onnxruntime-web/node_modules/protobufjs/src/index-minimal.js","../node_modules/onnxruntime-web/node_modules/protobufjs/minimal.js","../node_modules/onnxruntime-web/lib/onnxjs/ort-schema/protobuf/onnx.js","../node_modules/onnxruntime-web/lib/onnxjs/util.ts","../node_modules/onnxruntime-web/lib/onnxjs/tensor.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-source.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/types.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/utils.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/packing-utils.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pack.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape-packed.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/uint8-encode.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unpack.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-data-encoder.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/inference-handler.ts","../node_modules/onnxruntime-web/lib/onnxjs/attribute-with-cache-key.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/batch-normalization.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-definitions.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/binary-op.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/cast.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat-packed.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unary-op.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/fuse-utils.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-grouped.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col-pack.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul-pack.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-pack.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/dot-product.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-transpose.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/transpose.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/depth-to-space.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/flatten.ts","../node_modules/onnxruntime-web/lib/onnxjs/operators.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gather.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gemm.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/image-scaler.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/instance-normalization.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/lrn.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pad.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pool.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reduce.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/upsample.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/resize-packed.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/shape.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/slice.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/softmax.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/split.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/squeeze.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/sum.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/tile.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unsqueeze.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/op-resolve-rules.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-function-inliner.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout-strategy.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-vec-lib.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-registered-libs.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-preprocessor.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/program-manager.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-manager.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/session-handler.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context-factory.ts","../node_modules/onnxruntime-web/lib/onnxjs/backends/backend-webgl.ts","../node_modules/onnxruntime-web/lib/onnxjs/backend.ts","../node_modules/onnxruntime-web/lib/onnxjs/execution-plan.ts","../node_modules/onnxruntime-web/lib/onnxjs/attribute.ts","../node_modules/onnxruntime-web/lib/onnxjs/graph.ts","../node_modules/onnxruntime-web/lib/onnxjs/model.ts","../node_modules/onnxruntime-web/lib/onnxjs/session.ts","../node_modules/onnxruntime-web/lib/onnxjs/session-handler-inference.ts","../node_modules/onnxruntime-web/lib/backend-onnxjs.ts","../node_modules/onnxruntime-web/lib/wasm/wasm-utils-env.ts","../node_modules/onnxruntime-web/lib/wasm/proxy-worker/main.ts","../node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.mjs","../node_modules/onnxruntime-web/lib/wasm/wasm-utils-import.ts","../node_modules/onnxruntime-web/lib/wasm/wasm-factory.ts","../node_modules/onnxruntime-web/lib/wasm/wasm-utils.ts","../node_modules/onnxruntime-web/lib/wasm/run-options.ts","../node_modules/onnxruntime-web/lib/wasm/session-options.ts","../node_modules/onnxruntime-web/lib/wasm/wasm-common.ts","../node_modules/onnxruntime-web/lib/wasm/wasm-utils-load-file.ts","../node_modules/onnxruntime-web/lib/wasm/wasm-core-impl.ts","../node_modules/onnxruntime-web/lib/wasm/proxy-wrapper.ts","../node_modules/onnxruntime-web/lib/wasm/session-handler-inference.ts","../node_modules/onnxruntime-web/lib/backend-wasm.ts","../node_modules/onnxruntime-web/lib/backend-wasm-inference.ts","../node_modules/onnxruntime-web/lib/index.ts","../node_modules/onnxruntime-web/lib/version.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend} from './backend.js';\nimport {InferenceSession} from './inference-session.js';\n\ninterface BackendInfo {\n  backend: Backend;\n  priority: number;\n\n  initPromise?: Promise<void>;\n  initialized?: boolean;\n  aborted?: boolean;\n  error?: string;\n}\n\nconst backends: Map<string, BackendInfo> = new Map();\nconst backendsSortedByPriority: string[] = [];\n\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\n  if (backend && typeof backend.init === 'function' && typeof backend.createInferenceSessionHandler === 'function') {\n    const currentBackend = backends.get(name);\n    if (currentBackend === undefined) {\n      backends.set(name, {backend, priority});\n    } else if (currentBackend.priority > priority) {\n      // same name is already registered with a higher priority. skip registeration.\n      return;\n    } else if (currentBackend.priority === priority) {\n      if (currentBackend.backend !== backend) {\n        throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n      }\n    }\n\n    if (priority >= 0) {\n      const i = backendsSortedByPriority.indexOf(name);\n      if (i !== -1) {\n        backendsSortedByPriority.splice(i, 1);\n      }\n\n      for (let i = 0; i < backendsSortedByPriority.length; i++) {\n        if (backends.get(backendsSortedByPriority[i])!.priority <= priority) {\n          backendsSortedByPriority.splice(i, 0, name);\n          return;\n        }\n      }\n      backendsSortedByPriority.push(name);\n    }\n    return;\n  }\n\n  throw new TypeError('not a valid backend');\n};\n\n/**\n * Try to resolve and initialize a backend.\n *\n * @param backendName - the name of the backend.\n * @returns the backend instance if resolved and initialized successfully, or an error message if failed.\n */\nconst tryResolveAndInitializeBackend = async(backendName: string): Promise<Backend|string> => {\n  const backendInfo = backends.get(backendName);\n  if (!backendInfo) {\n    return 'backend not found.';\n  }\n\n  if (backendInfo.initialized) {\n    return backendInfo.backend;\n  } else if (backendInfo.aborted) {\n    return backendInfo.error!;\n  } else {\n    const isInitializing = !!backendInfo.initPromise;\n    try {\n      if (!isInitializing) {\n        backendInfo.initPromise = backendInfo.backend.init(backendName);\n      }\n      await backendInfo.initPromise;\n      backendInfo.initialized = true;\n      return backendInfo.backend;\n    } catch (e) {\n      if (!isInitializing) {\n        backendInfo.error = `${e}`;\n        backendInfo.aborted = true;\n      }\n      return backendInfo.error!;\n    } finally {\n      delete backendInfo.initPromise;\n    }\n  }\n};\n\n/**\n * Resolve execution providers from the specific session options.\n *\n * @param options - the session options object.\n * @returns a promise that resolves to a tuple of an initialized backend instance and a session options object with\n * filtered EP list.\n *\n * @ignore\n */\nexport const resolveBackendAndExecutionProviders = async(options: InferenceSession.SessionOptions):\n    Promise<[backend: Backend, options: InferenceSession.SessionOptions]> => {\n      // extract backend hints from session options\n      const eps = options.executionProviders || [];\n      const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n      const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n\n      // try to resolve and initialize all requested backends\n      let backend: Backend|undefined;\n      const errors = [];\n      const availableBackendNames = new Set<string>();\n      for (const backendName of backendNames) {\n        const resolveResult = await tryResolveAndInitializeBackend(backendName);\n        if (typeof resolveResult === 'string') {\n          errors.push({name: backendName, err: resolveResult});\n        } else {\n          if (!backend) {\n            backend = resolveResult;\n          }\n          if (backend === resolveResult) {\n            availableBackendNames.add(backendName);\n          }\n        }\n      }\n\n      // if no backend is available, throw error.\n      if (!backend) {\n        throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n      }\n\n      // for each explicitly requested backend, if it's not available, output warning message.\n      for (const {name, err} of errors) {\n        if (backendHints.includes(name)) {\n          // eslint-disable-next-line no-console\n          console.warn(`removing requested execution provider \"${\n              name}\" from session options because it is not available: ${err}`);\n        }\n      }\n\n      const filteredEps = eps.filter(i => availableBackendNames.has(typeof i === 'string' ? i : i.name));\n\n      return [\n        backend, new Proxy(options, {\n          get: (target, prop) => {\n            if (prop === 'executionProviders') {\n              return filteredEps;\n            }\n            return Reflect.get(target, prop);\n          }\n        })\n      ];\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {TrainingSession} from './training-session.js';\n\n/**\n * @ignore\n */\nexport declare namespace SessionHandler {\n  type FeedsType = {[name: string]: OnnxValue};\n  type FetchesType = {[name: string]: OnnxValue | null};\n  type ReturnType = {[name: string]: OnnxValue};\n}\n\n/**\n * Represents shared SessionHandler functionality\n *\n * @ignore\n */\ninterface SessionHandler {\n  dispose(): Promise<void>;\n\n  readonly inputNames: readonly string[];\n  readonly outputNames: readonly string[];\n}\n\n/**\n * Represent a handler instance of an inference session.\n *\n * @ignore\n */\nexport interface InferenceSessionHandler extends SessionHandler {\n  startProfiling(): void;\n  endProfiling(): void;\n\n  run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\n}\n\n/**\n * Represent a handler instance of a training inference session.\n *\n * @ignore\n */\nexport interface TrainingSessionHandler extends SessionHandler {\n  readonly evalInputNames: readonly string[];\n  readonly evalOutputNames: readonly string[];\n\n  lazyResetGrad(): Promise<void>;\n  runTrainStep(\n      feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\n  runOptimizerStep(options: InferenceSession.RunOptions): Promise<void>;\n  runEvalStep(\n      feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\n\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n}\n\n/**\n * Represent a backend that provides implementation of model inferencing.\n *\n * @ignore\n */\nexport interface Backend {\n  /**\n   * Initialize the backend asynchronously. Should throw when failed.\n   */\n  init(backendName: string): Promise<void>;\n\n  createInferenceSessionHandler(uriOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n\n  createTrainingSessionHandler?\n      (checkpointStateUriOrBuffer: TrainingSession.UriOrBuffer, trainModelUriOrBuffer: TrainingSession.UriOrBuffer,\n       evalModelUriOrBuffer: TrainingSession.UriOrBuffer, optimizerModelUriOrBuffer: TrainingSession.UriOrBuffer,\n       options: InferenceSession.SessionOptions): Promise<TrainingSessionHandler>;\n}\n\nexport {registerBackend} from './backend-impl.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.19.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from './env.js';\nimport {version} from './version.js';\n\ntype LogLevelType = Env['logLevel'];\n\nlet logLevelValue: Required<LogLevelType> = 'warning';\n\nexport const env: Env = {\n  wasm: {} as Env.WebAssemblyFlags,\n  webgl: {} as Env.WebGLFlags,\n  webgpu: {} as Env.WebGpuFlags,\n  versions: {common: version},\n\n  set logLevel(value: LogLevelType) {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n    logLevelValue = value;\n  },\n  get logLevel(): Required<LogLevelType> {\n    return logLevelValue;\n  },\n};\n\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', {enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env as envImpl} from './env-impl.js';\n\nexport declare namespace Env {\n  export type WasmPathPrefix = string;\n  export interface WasmFilePaths {\n    /**\n     * Specify the override path for the main .wasm file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .wasm file is:\n     * - `ort-wasm-simd-threaded.wasm` for default build\n     * - `ort-wasm-simd-threaded.jsep.wasm` for JSEP build (with WebGPU and WebNN)\n     * - `ort-training-wasm-simd-threaded.wasm` for training build\n     */\n    wasm?: URL|string;\n    /**\n     * Specify the override path for the main .mjs file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .mjs file is:\n     * - `ort-wasm-simd-threaded.mjs` for default build\n     * - `ort-wasm-simd-threaded.jsep.mjs` for JSEP build (with WebGPU and WebNN)\n     * - `ort-training-wasm-simd-threaded.mjs` for training build\n     */\n    mjs?: URL|string;\n  }\n  export type WasmPrefixOrFilePaths = WasmPathPrefix|WasmFilePaths;\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @deprecated This property is deprecated. Since SIMD is supported by all major JavaScript engines, non-SIMD\n     * build is no longer provided. This property will be removed in future release.\n     * @defaultValue `true`\n     */\n    simd?: boolean;\n\n    /**\n     * set or get a boolean value indicating whether to enable trace.\n     *\n     * @deprecated Use `env.trace` instead. If `env.trace` is set, this property will be ignored.\n     * @defaultValue `false`\n     */\n    trace?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm/.mjs files, or an object of overrides for both .wasm/.mjs file. The override\n     * path should be an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set a custom buffer which contains the WebAssembly binary. If this property is set, the `wasmPaths` property will\n     * be ignored.\n     */\n    wasmBinary?: ArrayBufferLike|Uint8Array;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl'|'webgl2';\n    /**\n     * Get the WebGL rendering context.\n     */\n    readonly context: WebGLRenderingContext;\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly'|'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n\n  export interface WebGpuProfilingDataV1TensorMetadata {\n    dims: readonly number[];\n    dataType: string;\n  }\n  export interface WebGpuProfilingDataV1 {\n    version: 1;\n    inputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    outputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    kernelId: number;\n    kernelType: string;\n    kernelName: string;\n    programName: string;\n    startTime: number;\n    endTime: number;\n  }\n\n  export type WebGpuProfilingData = WebGpuProfilingDataV1;\n\n  export interface WebGpuFlags {\n    /**\n     * Set or get the profiling mode.\n     *\n     * @deprecated Use `env.webgpu.profiling.mode` instead. If `env.webgpu.profiling.mode` is set, this property will be\n     * ignored.\n     */\n    profilingMode?: 'off'|'default';\n    /**\n     * Set or get the profiling configuration.\n     */\n    profiling?: {\n      /**\n       * Set or get the profiling mode.\n       *\n       * @defaultValue `'off'`\n       */\n      mode?: 'off'|'default';\n\n      /**\n       * Set or get a callback function when a profiling data is received. If not set, the profiling data will be\n       * printed to console.\n       */\n      ondata?: (data: WebGpuProfilingData) => void;\n    };\n    /**\n     * Set or get the power preference.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    powerPreference?: 'low-power'|'high-performance';\n    /**\n     * Set or get the force fallback adapter flag.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    forceFallbackAdapter?: boolean;\n    /**\n     * Set or get the adapter for WebGPU.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as the GPU adapter for the underlying WebGPU backend to create GPU device.\n     *\n     * If this property is not set, it will be available to get after the first WebGPU inference session is created. The\n     * value will be the GPU adapter that created by the underlying WebGPU backend.\n     *\n     * When use with TypeScript, the type of this property is `GPUAdapter` defined in \"@webgpu/types\".\n     * Use `const adapter = env.webgpu.adapter as GPUAdapter;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType}\n     */\n    adapter: unknown;\n    /**\n     * Get the device for WebGPU.\n     *\n     * This property is only available after the first WebGPU inference session is created.\n     *\n     * When use with TypeScript, the type of this property is `GPUDevice` defined in \"@webgpu/types\".\n     * Use `const device = env.webgpu.device as GPUDevice;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType} for more details about why not use types defined in \"@webgpu/types\".\n     */\n    readonly device: unknown;\n    /**\n     * Set or get whether validate input content.\n     *\n     * @defaultValue `false`\n     */\n    validateInputContent?: boolean;\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal';\n\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * set or get a boolean value indicating whether to enable trace.\n   *\n   * @defaultValue `false`\n   */\n  trace?: boolean;\n\n  /**\n   * Get version of the current package.\n   */\n  readonly versions: {\n    readonly common: string;\n    readonly web?: string;\n    readonly node?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    readonly 'react-native'?: string;\n  };\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  readonly wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  readonly webgl: Env.WebGLFlags;\n\n  /**\n   * Represent a set of flags for WebGPU\n   */\n  readonly webgpu: Env.WebGpuFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = envImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorToDataUrlOptions, TensorToImageDataOptions} from './tensor-conversion.js';\nimport {Tensor} from './tensor.js';\n\n/**\n * implementation of Tensor.toDataURL()\n */\nexport const tensorToDataURL = (tensor: Tensor, options?: TensorToDataUrlOptions): string => {\n  const canvas = typeof document !== 'undefined' ? document.createElement('canvas') : (new OffscreenCanvas(1, 1));\n  canvas.width = tensor.dims[3];\n  canvas.height = tensor.dims[2];\n  const pixels2DContext =\n      canvas.getContext('2d') as (CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D | null);\n\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[3];\n    } else {  // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n    }\n\n    const inputformat = options?.format !== undefined ? options.format : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    // Default pointer assignments\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const R = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0];  // R value\n        const G = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1];  // G value\n        const B = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2];  // B value\n        const A = aTensorPointer === -1 ?\n            255 :\n            ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3];  // A value\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n        pixels2DContext.fillRect(j, i, 1, 1);\n      }\n    }\n    if ('toDataURL' in canvas) {\n      return canvas.toDataURL();\n    } else {\n      throw new Error('toDataURL is not supported');\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n};\n\n/**\n * implementation of Tensor.toImageData()\n */\nexport const tensorToImageData = (tensor: Tensor, options?: TensorToImageDataOptions): ImageData => {\n  const pixels2DContext = typeof document !== 'undefined' ?\n      document.createElement('canvas').getContext('2d') :\n      new OffscreenCanvas(1, 1).getContext('2d') as OffscreenCanvasRenderingContext2D;\n  let image: ImageData;\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    let channels: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[1];\n      channels = tensor.dims[3];\n    } else {  // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n      channels = tensor.dims[1];\n    }\n    const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    if (options !== undefined) {\n      if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n          (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n        throw new Error('Tensor format doesn\\'t match input tensor dims');\n      }\n    }\n\n    // Default pointer assignments\n    const step = 4;\n    let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    image = pixels2DContext.createImageData(width, height);\n\n    for (let i = 0; i < height * width;\n         rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n      image.data[rImagePointer] = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0];  // R value\n      image.data[gImagePointer] = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1];  // G value\n      image.data[bImagePointer] = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2];  // B value\n      image.data[aImagePointer] = aTensorPointer === -1 ?\n          255 :\n          ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3];  // A value\n    }\n\n  } else {\n    throw new Error('Can not access image data');\n  }\n  return image;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OptionsDimensions, OptionsFormat, OptionsNormalizationParameters, OptionsTensorFormat, OptionsTensorLayout, TensorFromGpuBufferOptions, TensorFromImageBitmapOptions, TensorFromImageDataOptions, TensorFromImageElementOptions, TensorFromTextureOptions, TensorFromUrlOptions} from './tensor-factory.js';\nimport {Tensor} from './tensor-impl.js';\nimport {Tensor as TensorInterface} from './tensor.js';\n\ninterface BufferToTensorOptions extends OptionsDimensions, OptionsTensorLayout, OptionsNormalizationParameters,\n                                        OptionsFormat, OptionsTensorFormat {}\n\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor = (buffer: Uint8ClampedArray|undefined, options: BufferToTensorOptions): Tensor => {\n  if (buffer === undefined) {\n    throw new Error('Image buffer must be defined');\n  }\n  if (options.height === undefined || options.width === undefined) {\n    throw new Error('Image height and width must be defined');\n  }\n  if (options.tensorLayout === 'NHWC') {\n    throw new Error('NHWC Tensor layout is not supported yet');\n  }\n\n  const {height, width} = options;\n\n  const norm = options.norm ?? {mean: 255, bias: 0};\n  let normMean: [number, number, number, number];\n  let normBias: [number, number, number, number];\n\n  if (typeof (norm.mean) === 'number') {\n    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n  } else {\n    normMean = [norm.mean![0], norm.mean![1], norm.mean![2], norm.mean![3] ?? 255];\n  }\n\n  if (typeof (norm.bias) === 'number') {\n    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n  } else {\n    normBias = [norm.bias![0], norm.bias![1], norm.bias![2], norm.bias![3] ?? 0];\n  }\n\n  const inputformat = options.format !== undefined ? options.format : 'RGBA';\n  // default value is RGBA since imagedata and HTMLImageElement uses it\n\n  const outputformat =\n      options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n  const stride = height * width;\n  const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n\n  // Default pointer assignments\n  let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n  let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n  // Updating the pointer assignments based on the input image format\n  if (inputformat === 'RGB') {\n    step = 3;\n    rImagePointer = 0;\n    gImagePointer = 1;\n    bImagePointer = 2;\n    aImagePointer = -1;\n  }\n\n  // Updating the pointer assignments based on the output tensor format\n  if (outputformat === 'RGBA') {\n    aTensorPointer = stride * 3;\n  } else if (outputformat === 'RBG') {\n    rTensorPointer = 0;\n    bTensorPointer = stride;\n    gTensorPointer = stride * 2;\n  } else if (outputformat === 'BGR') {\n    bTensorPointer = 0;\n    gTensorPointer = stride;\n    rTensorPointer = stride * 2;\n  }\n\n  for (let i = 0; i < stride;\n       i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n    float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n    float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n    float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n    if (aTensorPointer !== -1 && aImagePointer !== -1) {\n      float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n    }\n  }\n\n  // Float32Array -> ort.Tensor\n  const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n                                                 new Tensor('float32', float32Data, [1, 3, height, width]);\n  return outputTensor;\n};\n\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async(\n    image: ImageData|HTMLImageElement|ImageBitmap|string,\n    options?: TensorFromImageDataOptions|TensorFromImageElementOptions|TensorFromImageBitmapOptions|\n    TensorFromUrlOptions): Promise<Tensor> => {\n  // checking the type of image object\n  const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n  const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n  const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n  const isString = typeof image === 'string';\n\n  let data: Uint8ClampedArray|undefined;\n  let bufferToTensorOptions: BufferToTensorOptions = options ?? {};\n\n  const createCanvas = () => {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(1, 1);\n    } else {\n      throw new Error('Canvas is not supported');\n    }\n  };\n  const createCanvasContext = (canvas: HTMLCanvasElement|OffscreenCanvas) => {\n    if (canvas instanceof HTMLCanvasElement) {\n      return canvas.getContext('2d');\n    } else if (canvas instanceof OffscreenCanvas) {\n      return canvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    } else {\n      return null;\n    }\n  };\n  // filling and checking image configuration options\n  if (isHTMLImageEle) {\n    // HTMLImageElement - image object - format is RGBA by default\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      let height = image.height;\n      let width = image.width;\n      if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n        height = options.resizedHeight;\n        width = options.resizedWidth;\n      }\n\n      if (options !== undefined) {\n        bufferToTensorOptions = options;\n        if (options.tensorFormat !== undefined) {\n          throw new Error('Image input config format must be RGBA for HTMLImageElement');\n        } else {\n          bufferToTensorOptions.tensorFormat = 'RGBA';\n        }\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      } else {\n        bufferToTensorOptions.tensorFormat = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      }\n\n      pixels2DContext.drawImage(image, 0, 0);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isImageDataEle) {\n    let height: number;\n    let width: number;\n\n    if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n      height = options.resizedHeight;\n      width = options.resizedWidth;\n    } else {\n      height = image.height;\n      width = image.width;\n    }\n\n    if (options !== undefined) {\n      bufferToTensorOptions = options;\n    }\n    bufferToTensorOptions.format = 'RGBA';\n    bufferToTensorOptions.height = height;\n    bufferToTensorOptions.width = width;\n\n    if (options !== undefined) {\n      const tempCanvas = createCanvas();\n\n      tempCanvas.width = width;\n      tempCanvas.height = height;\n\n      const pixels2DContext = createCanvasContext(tempCanvas);\n\n      if (pixels2DContext != null) {\n        pixels2DContext.putImageData(image, 0, 0);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n      } else {\n        throw new Error('Can not access image data');\n      }\n    } else {\n      data = image.data;\n    }\n  } else if (isImageBitmap) {\n    // ImageBitmap - image object - format must be provided by user\n    if (options === undefined) {\n      throw new Error('Please provide image config with format for Imagebitmap');\n    }\n\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      const height = image.height;\n      const width = image.width;\n      pixels2DContext.drawImage(image, 0, 0, width, height);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n      bufferToTensorOptions.height = height;\n      bufferToTensorOptions.width = width;\n      return bufferToTensor(data, bufferToTensorOptions);\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isString) {\n    return new Promise((resolve, reject) => {\n      const canvas = createCanvas();\n      const context = createCanvasContext(canvas);\n      if (!image || !context) {\n        return reject();\n      }\n      const newImage = new Image();\n      newImage.crossOrigin = 'Anonymous';\n      newImage.src = image;\n      newImage.onload = () => {\n        canvas.width = newImage.width;\n        canvas.height = newImage.height;\n        context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n        const img = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        bufferToTensorOptions.height = canvas.height;\n        bufferToTensorOptions.width = canvas.width;\n        resolve(bufferToTensor(img.data, bufferToTensorOptions));\n      };\n    });\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n\n  if (data !== undefined) {\n    return bufferToTensor(data, bufferToTensorOptions);\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n};\n\n/**\n * implementation of Tensor.fromTexture().\n */\nexport const tensorFromTexture = <T extends TensorInterface.TextureDataTypes>(\n    texture: TensorInterface.TextureType, options: TensorFromTextureOptions<T>): Tensor => {\n  const {width, height, download, dispose} = options;\n  // Always assume RGBAF32. TODO: support different texture format\n  const dims = [1, height, width, 4];\n  return new Tensor({location: 'texture', type: 'float32', texture, dims, download, dispose});\n};\n\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nexport const tensorFromGpuBuffer = <T extends TensorInterface.GpuBufferDataTypes>(\n    gpuBuffer: TensorInterface.GpuBufferType, options: TensorFromGpuBufferOptions<T>): Tensor => {\n  const {dataType, dims, download, dispose} = options;\n  return new Tensor({location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose});\n};\n\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nexport const tensorFromPinnedBuffer = <T extends TensorInterface.CpuPinnedDataTypes>(\n    type: T, buffer: TensorInterface.DataTypeMap[T], dims?: readonly number[]): Tensor =>\n    new Tensor({location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from './tensor.js';\n\nexport type SupportedTypedArrayConstructors = Float32ArrayConstructor|Uint8ArrayConstructor|Int8ArrayConstructor|\n    Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|Uint8ArrayConstructor|\n    Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor;\nexport type SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\n  ['float32', Float32Array],\n  ['uint8', Uint8Array],\n  ['int8', Int8Array],\n  ['uint16', Uint16Array],\n  ['int16', Int16Array],\n  ['int32', Int32Array],\n  ['bool', Uint8Array],\n  ['float64', Float64Array],\n  ['uint32', Uint32Array],\n]);\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, Tensor.Type>([\n  [Float32Array, 'float32'],\n  [Uint8Array, 'uint8'],\n  [Int8Array, 'int8'],\n  [Uint16Array, 'uint16'],\n  [Int16Array, 'int16'],\n  [Int32Array, 'int32'],\n  [Float64Array, 'float64'],\n  [Uint32Array, 'uint32'],\n]);\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// the following code allows delaying execution of BigInt/Float16Array checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt/Float16Array\n// polyfill if available.\nlet isTypedArrayChecked = false;\nexport const checkTypedArray = () => {\n  if (!isTypedArrayChecked) {\n    isTypedArrayChecked = true;\n    const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && BigInt64Array.from;\n    const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && BigUint64Array.from;\n    const isFloat16ArrayAvailable = typeof Float16Array !== 'undefined' && Float16Array.from;\n\n    if (isBigInt64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n    }\n    if (isBigUint64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n    }\n    if (isFloat16ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Float16Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, 'float16');\n    } else {\n      // if Float16Array is not available, use 'Uint16Array' to store the data.\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Uint16Array);\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CpuPinnedConstructorParameters, GpuBufferConstructorParameters, TextureConstructorParameters} from './tensor-factory.js';\nimport {Tensor} from './tensor-impl.js';\n\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims: readonly unknown[]): number => {\n  let size = 1;\n  for (let i = 0; i < dims.length; i++) {\n    const dim = dims[i];\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n    }\n    if (dim < 0) {\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n    }\n    size *= dim;\n  }\n  return size;\n};\n\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor: Tensor, dims: readonly number[]): Tensor => {\n  switch (tensor.location) {\n    case 'cpu':\n      return new Tensor(tensor.type, tensor.data, dims);\n    case 'cpu-pinned':\n      return new Tensor({\n        location: 'cpu-pinned',\n        data: tensor.data as CpuPinnedConstructorParameters['data'],\n        type: tensor.type as CpuPinnedConstructorParameters['type'],\n        dims,\n      });\n    case 'texture':\n      return new Tensor({\n        location: 'texture',\n        texture: tensor.texture,\n        type: tensor.type as TextureConstructorParameters['type'],\n        dims,\n      });\n    case 'gpu-buffer':\n      return new Tensor({\n        location: 'gpu-buffer',\n        gpuBuffer: tensor.gpuBuffer,\n        type: tensor.type as GpuBufferConstructorParameters['type'],\n        dims,\n      });\n    default:\n      throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {tensorToDataURL, tensorToImageData} from './tensor-conversion-impl.js';\nimport {TensorToDataUrlOptions, TensorToImageDataOptions} from './tensor-conversion.js';\nimport {tensorFromGpuBuffer, tensorFromImage, tensorFromPinnedBuffer, tensorFromTexture} from './tensor-factory-impl.js';\nimport {CpuPinnedConstructorParameters, GpuBufferConstructorParameters, TensorFromGpuBufferOptions, TensorFromImageBitmapOptions, TensorFromImageDataOptions, TensorFromImageElementOptions, TensorFromTextureOptions, TensorFromUrlOptions, TextureConstructorParameters} from './tensor-factory.js';\nimport {checkTypedArray, NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, SupportedTypedArray, SupportedTypedArrayConstructors} from './tensor-impl-type-mapping.js';\nimport {calculateSize, tensorReshape} from './tensor-utils-impl.js';\nimport {Tensor as TensorInterface} from './tensor.js';\n\n// type aliases for those exported from Tensor interface\n\ntype TensorType = TensorInterface.Type;\ntype TensorDataType = TensorInterface.DataType;\ntype TensorDataLocation = TensorInterface.DataLocation;\ntype TensorTextureType = TensorInterface.TextureType;\ntype TensorGpuBufferType = TensorInterface.GpuBufferType;\n\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nexport class Tensor implements TensorInterface {\n  // #region constructors\n\n  /**\n   * Construct a new CPU tensor object from the given type, data and dims.\n   */\n  constructor(\n      type: TensorType, data: TensorDataType|readonly string[]|readonly number[]|readonly boolean[],\n      dims?: readonly number[]);\n  /**\n   * Construct a new CPU tensor object from the given data and dims. Type is inferred from data.\n   */\n  constructor(data: TensorDataType|readonly string[]|readonly boolean[], dims?: readonly number[]);\n  /**\n   * Construct a new tensor object from the pinned CPU data with the given type and dims.\n   *\n   * Tensor's location will be set to 'cpu-pinned'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: CpuPinnedConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGL texture with the given type and dims.\n   *\n   * Tensor's location will be set to 'texture'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: TextureConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGPU buffer with the given type and dims.\n   *\n   * Tensor's location will be set to 'gpu-buffer'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: GpuBufferConstructorParameters);\n\n  /**\n   * implementation.\n   */\n  constructor(\n      arg0: TensorType|TensorDataType|readonly string[]|readonly boolean[]|CpuPinnedConstructorParameters|\n      TextureConstructorParameters|GpuBufferConstructorParameters,\n      arg1?: TensorDataType|readonly number[]|readonly string[]|readonly boolean[], arg2?: readonly number[]) {\n    // perform one-time check for BigInt/Float16Array support\n    checkTypedArray();\n\n    let type: TensorType;\n    let dims: readonly number[];\n\n    if (typeof arg0 === 'object' && 'location' in arg0) {\n      //\n      // constructing tensor from specific location\n      //\n      this.dataLocation = arg0.location;\n      type = arg0.type;\n      dims = arg0.dims;\n      switch (arg0.location) {\n        case 'cpu-pinned': {\n          const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n          if (!expectedTypedArrayConstructor) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n          }\n          if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n            throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n          }\n          this.cpuData = arg0.data;\n          break;\n        }\n        case 'texture': {\n          if (type !== 'float32') {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n          }\n          this.gpuTextureData = arg0.texture;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'gpu-buffer': {\n          if ((type !== 'float32' && type !== 'float16' && type !== 'int32' && type !== 'int64' && type !== 'uint32' &&\n               type !== 'uint8' && type !== 'bool')) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n          }\n          this.gpuBufferData = arg0.gpuBuffer;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        default:\n          throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n      }\n    } else {\n      //\n      // constructing tensor of location 'cpu'\n      //\n      let data: TensorDataType;\n      let maybeDims: typeof arg1|typeof arg2;\n      // check whether arg0 is type or data\n      if (typeof arg0 === 'string') {\n        //\n        // Override: constructor(type, data, ...)\n        //\n        type = arg0;\n        maybeDims = arg2;\n        if (arg0 === 'string') {\n          // string tensor\n          if (!Array.isArray(arg1)) {\n            throw new TypeError('A string tensor\\'s data must be a string array.');\n          }\n          // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n          // error will be populated at inference\n          data = arg1;\n        } else {\n          // numeric tensor\n          const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n          if (typedArrayConstructor === undefined) {\n            throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n          }\n          if (Array.isArray(arg1)) {\n            if (arg0 === 'float16' && typedArrayConstructor === Uint16Array) {\n              // When no Float16Array polyfill is used, we cannot create 'float16' tensor from number array.\n              //\n              // Throw error here because when user try to use number array as data,\n              // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n              // Uint16Array.from(arg1) which generates wrong data.\n              throw new TypeError(\n                  'Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n            } else if (arg0 === 'uint64' || arg0 === 'int64') {\n              // use 'as any' here because:\n              // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n              // see https://github.com/microsoft/TypeScript/issues/17002\n              // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n              // does not accept parameter mapFn.\n              // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n              // type.\n\n              // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1, BigInt);\n            } else {\n              // assume 'arg1' is of type \"readonly number[]\" here.\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1);\n            }\n          } else if (arg1 instanceof typedArrayConstructor) {\n            data = arg1;\n          } else {\n            throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n          }\n        }\n      } else {\n        //\n        // Override: constructor(data, ...)\n        //\n        maybeDims = arg1;\n        if (Array.isArray(arg0)) {\n          // only boolean[] and string[] is supported\n          if (arg0.length === 0) {\n            throw new TypeError('Tensor type cannot be inferred from an empty array.');\n          }\n          const firstElementType = typeof arg0[0];\n          if (firstElementType === 'string') {\n            type = 'string';\n            data = arg0;\n          } else if (firstElementType === 'boolean') {\n            type = 'bool';\n            // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n            // wrong type. We use 'as any' to make it happy.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data = Uint8Array.from(arg0 as any[]);\n          } else {\n            throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n          }\n        } else {\n          // get tensor type from TypedArray\n          const mappedType =\n              NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor as SupportedTypedArrayConstructors);\n          if (mappedType === undefined) {\n            throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n          }\n          type = mappedType;\n          data = arg0 as SupportedTypedArray;\n        }\n      }\n\n      // type and data is processed, now processing dims\n      if (maybeDims === undefined) {\n        // assume 1-D tensor if dims omitted\n        maybeDims = [data.length];\n      } else if (!Array.isArray(maybeDims)) {\n        throw new TypeError('A tensor\\'s dims must be a number array');\n      }\n      dims = maybeDims as readonly number[];\n\n      this.cpuData = data;\n      this.dataLocation = 'cpu';\n    }\n\n    // perform check on dims\n    const size = calculateSize(dims);\n    // if data is on CPU, check whether data length matches tensor size\n    if (this.cpuData && size !== this.cpuData.length) {\n      throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n    }\n\n    this.type = type;\n    this.dims = dims;\n    this.size = size;\n  }\n  // #endregion\n\n  // #region factory\n  static async fromImage(\n      image: ImageData|HTMLImageElement|ImageBitmap|string,\n      options?: TensorFromImageDataOptions|TensorFromImageElementOptions|TensorFromImageBitmapOptions|\n      TensorFromUrlOptions): Promise<TensorInterface> {\n    return tensorFromImage(image, options);\n  }\n\n  static fromTexture<T extends TensorInterface.TextureDataTypes>(\n      texture: TensorTextureType, options: TensorFromTextureOptions<T>): TensorInterface {\n    return tensorFromTexture(texture, options);\n  }\n\n  static fromGpuBuffer<T extends TensorInterface.GpuBufferDataTypes>(\n      gpuBuffer: TensorGpuBufferType, options: TensorFromGpuBufferOptions<T>): TensorInterface {\n    return tensorFromGpuBuffer(gpuBuffer, options);\n  }\n\n  static fromPinnedBuffer<T extends TensorInterface.CpuPinnedDataTypes>(\n      type: T, buffer: TensorInterface.DataTypeMap[T], dims?: readonly number[]): Tensor {\n    return tensorFromPinnedBuffer(type, buffer, dims);\n  }\n\n  // #endregion\n\n  // #region conversions\n  toDataURL(options?: TensorToDataUrlOptions): string {\n    return tensorToDataURL(this, options);\n  }\n\n  toImageData(options?: TensorToImageDataOptions): ImageData {\n    return tensorToImageData(this, options);\n  }\n  // #endregion\n\n  // #region public fields\n  readonly dims: readonly number[];\n  readonly type: TensorType;\n  readonly size: number;\n  // #endregion\n\n  // #region private fields\n\n  /**\n   * stores the location of the data.\n   */\n  private dataLocation: TensorDataLocation;\n\n  /**\n   * stores the data on CPU, if location is 'cpu' or 'cpu-pinned'. otherwise empty.\n   */\n  private cpuData?: TensorDataType;\n\n  /**\n   * stores the underlying texture when location is 'texture'. otherwise empty.\n   */\n  private gpuTextureData?: TensorTextureType;\n\n  /**\n   * stores the underlying GPU buffer when location is 'gpu-buffer'. otherwise empty.\n   */\n  private gpuBufferData?: TensorGpuBufferType;\n\n  /**\n   * stores an optional downloader function to download data from GPU to CPU.\n   */\n  private downloader?(): Promise<TensorDataType>;\n\n  /**\n   * a flag indicating whether the data is being downloaded from GPU to CPU.\n   */\n  private isDownloading?: boolean;\n\n  /**\n   * stores an optional disposer function to dispose the underlying data.\n   */\n  private disposer?(): void;\n  // #endregion\n\n  // #region properties\n  get data(): TensorDataType {\n    this.ensureValid();\n    if (!this.cpuData) {\n      throw new Error(\n          'The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n          'or use `texture` or `gpuBuffer` property to access the GPU data directly.');\n    }\n    return this.cpuData;\n  }\n\n  get location(): TensorDataLocation {\n    return this.dataLocation;\n  }\n\n  get texture(): TensorTextureType {\n    this.ensureValid();\n    if (!this.gpuTextureData) {\n      throw new Error('The data is not stored as a WebGL texture.');\n    }\n    return this.gpuTextureData;\n  }\n\n  get gpuBuffer(): TensorGpuBufferType {\n    this.ensureValid();\n    if (!this.gpuBufferData) {\n      throw new Error('The data is not stored as a WebGPU buffer.');\n    }\n    return this.gpuBufferData;\n  }\n  // #endregion\n\n  // #region methods\n\n  async getData(releaseData?: boolean): Promise<TensorDataType> {\n    this.ensureValid();\n    switch (this.dataLocation) {\n      case 'cpu':\n      case 'cpu-pinned':\n        return this.data;\n      case 'texture':\n      case 'gpu-buffer': {\n        if (!this.downloader) {\n          throw new Error('The current tensor is not created with a specified data downloader.');\n        }\n        if (this.isDownloading) {\n          throw new Error('The current tensor is being downloaded.');\n        }\n        try {\n          this.isDownloading = true;\n          const data = await this.downloader();\n          this.downloader = undefined;\n          this.dataLocation = 'cpu';\n          this.cpuData = data;\n\n          if (releaseData && this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n          }\n\n          return data;\n\n        } finally {\n          this.isDownloading = false;\n        }\n      }\n      default:\n        throw new Error(`cannot get data from location: ${this.dataLocation}`);\n    }\n  }\n\n  dispose(): void {\n    if (this.isDownloading) {\n      throw new Error('The current tensor is being downloaded.');\n    }\n\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    this.cpuData = undefined;\n    this.gpuTextureData = undefined;\n    this.gpuBufferData = undefined;\n    this.downloader = undefined;\n    this.isDownloading = undefined;\n\n    this.dataLocation = 'none';\n  }\n\n  // #endregion\n\n  // #region tensor utilities\n  private ensureValid(): void {\n    if (this.dataLocation === 'none') {\n      throw new Error('The tensor is disposed.');\n    }\n  }\n\n  reshape(dims: readonly number[]): TensorInterface {\n    this.ensureValid();\n    if (this.downloader || this.disposer) {\n      throw new Error('Cannot reshape a tensor that owns GPU resource.');\n    }\n    return tensorReshape(this, dims);\n  }\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorFactory} from './tensor-factory.js';\nimport {Tensor as TensorImpl} from './tensor-impl.js';\nimport {TypedTensorUtils} from './tensor-utils.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/**\n * represent a basic tensor with specified dimensions and data type.\n */\ninterface TypedTensorBase<T extends Tensor.Type> {\n  /**\n   * Get the dimensions of the tensor.\n   */\n  readonly dims: readonly number[];\n  /**\n   * Get the data type of the tensor.\n   */\n  readonly type: T;\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is not on CPU (eg. it's in the form of WebGL texture or WebGPU buffer), throw error.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n  /**\n   * Get the location of the data.\n   */\n  readonly location: Tensor.DataLocation;\n  /**\n   * Get the WebGL texture that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGL texture, throw error.\n   */\n  readonly texture: Tensor.TextureType;\n  /**\n   * Get the WebGPU buffer that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGPU buffer, throw error.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is on CPU, returns the data immediately.\n   * If the data is on GPU, downloads the data and returns the promise.\n   *\n   * @param releaseData - whether release the data on GPU. Ignore if data is already on CPU.\n   */\n  getData(releaseData?: boolean): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * Dispose the tensor data.\n   *\n   * If the data is on CPU, remove its internal reference to the underlying data.\n   * If the data is on GPU, release the data on GPU.\n   *\n   * After calling this function, the tensor is considered no longer valid. Its location will be set to 'none'.\n   */\n  dispose(): void;\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    float32: Float32Array;\n    uint8: Uint8Array;\n    int8: Int8Array;\n    uint16: Uint16Array;\n    int16: Int16Array;\n    int32: Int32Array;\n    int64: BigInt64Array;\n    string: string[];\n    bool: Uint8Array;\n    float16: Uint16Array;  // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: Float64Array;\n    uint32: Uint32Array;\n    uint64: BigUint64Array;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  interface ElementTypeMap {\n    float32: number;\n    uint8: number;\n    int8: number;\n    uint16: number;\n    int16: number;\n    int32: number;\n    int64: bigint;\n    string: string;\n    bool: boolean;\n    float16: number;  // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: number;\n    uint32: number;\n    uint64: bigint;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * supported data types for constructing a tensor from a pinned CPU buffer\n   */\n  export type CpuPinnedDataTypes = Exclude<Tensor.Type, 'string'>;\n\n  /**\n   * type alias for WebGL texture\n   */\n  export type TextureType = WebGLTexture;\n\n  /**\n   * supported data types for constructing a tensor from a WebGL texture\n   */\n  export type TextureDataTypes = 'float32';\n\n  /**\n   * type alias for WebGPU buffer\n   *\n   * The reason why we don't use type \"GPUBuffer\" defined in webgpu.d.ts from @webgpu/types is because \"@webgpu/types\"\n   * requires \"@types/dom-webcodecs\" as peer dependency when using TypeScript < v5.1 and its version need to be chosen\n   * carefully according to the TypeScript version being used. This means so far there is not a way to keep every\n   * TypeScript version happy. It turns out that we will easily broke users on some TypeScript version.\n   *\n   * for more info see https://github.com/gpuweb/types/issues/127\n   */\n  export type GpuBufferType = {size: number; mapState: 'unmapped' | 'pending' | 'mapped'};\n\n  /**\n   * supported data types for constructing a tensor from a WebGPU buffer\n   */\n  export type GpuBufferDataTypes = 'float32'|'float16'|'int32'|'int64'|'uint32'|'uint8'|'bool';\n\n  /**\n   * represent where the tensor data is stored\n   */\n  export type DataLocation = 'none'|'cpu'|'cpu-pinned'|'texture'|'gpu-buffer';\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\n\n/**\n * type TensorConstructor defines the constructors of 'Tensor' to create CPU tensor instances.\n */\nexport interface TensorConstructor extends TensorFactory {\n  // #region CPU tensor - specify element type\n  /**\n   * Construct a new string tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'string', data: Tensor.DataTypeMap['string']|readonly string[],\n      dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'bool', data: Tensor.DataTypeMap['bool']|readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new 64-bit integer typed tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new<T extends 'uint64'|'int64'>(\n      type: T, data: Tensor.DataTypeMap[T]|readonly bigint[]|readonly number[],\n      dims?: readonly number[]): TypedTensor<T>;\n\n  /**\n   * Construct a new numeric tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new<T extends Exclude<Tensor.Type, 'string'|'bool'|'uint64'|'int64'>>(\n      type: T, data: Tensor.DataTypeMap[T]|readonly number[], dims?: readonly number[]): TypedTensor<T>;\n  // #endregion\n\n  // #region CPU tensor - infer element types\n\n  /**\n   * Construct a new float32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\n\n  /**\n   * Construct a new int8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\n\n  /**\n   * Construct a new int16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\n\n  /**\n   * Construct a new int32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\n\n  /**\n   * Construct a new int64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\n\n  /**\n   * Construct a new string tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new float64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\n\n  /**\n   * Construct a new uint32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\n\n  /**\n   * Construct a new uint64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\n\n  // #endregion\n\n  // #region CPU tensor - fall back to non-generic tensor type declaration\n\n  /**\n   * Construct a new tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: Tensor.Type, data: Tensor.DataType|readonly number[]|readonly string[]|readonly bigint[]|readonly boolean[],\n      dims?: readonly number[]): Tensor;\n\n  /**\n   * Construct a new tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Tensor.DataType, dims?: readonly number[]): Tensor;\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl as TensorConstructor;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from './env-impl.js';\n\n/**\n * @ignore\n */\nexport const TRACE = (deviceType: string, label: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  // eslint-disable-next-line no-console\n  console.timeStamp(`${deviceType}::ORT::${label}`);\n};\n\nconst TRACE_FUNC = (msg: string, extraMsg?: string) => {\n  const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n  let hasTraceFunc = false;\n  for (let i = 0; i < stack.length; i++) {\n    if (hasTraceFunc && !stack[i].includes('TRACE_FUNC')) {\n      let label = `FUNC_${msg}::${stack[i].trim().split(' ')[1]}`;\n      if (extraMsg) {\n        label += `::${extraMsg}`;\n      }\n      TRACE('CPU', label);\n      return;\n    }\n    if (stack[i].includes('TRACE_FUNC')) {\n      hasTraceFunc = true;\n    }\n  }\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_BEGIN = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('BEGIN', extraMsg);\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_END = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('END', extraMsg);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {resolveBackendAndExecutionProviders} from './backend-impl.js';\nimport {InferenceSessionHandler} from './backend.js';\nimport {InferenceSession as InferenceSessionInterface} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {Tensor} from './tensor.js';\nimport {TRACE_FUNC_BEGIN, TRACE_FUNC_END} from './trace.js';\n\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype FeedsType = InferenceSessionInterface.FeedsType;\ntype FetchesType = InferenceSessionInterface.FetchesType;\ntype ReturnType = InferenceSessionInterface.ReturnType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  private constructor(handler: InferenceSessionHandler) {\n    this.handler = handler;\n  }\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async run(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const fetches: {[name: string]: OnnxValue|null} = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\n          }\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'options\\' must be an object.');\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n    }\n\n    // check if all inputs are in feed\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    // feeds, fetches and options are prepared\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue: {[name: string]: OnnxValue} = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    TRACE_FUNC_END();\n    return returnValue;\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: SessionOptions):\n      Promise<InferenceSessionInterface>;\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static async create(\n      arg0: string|ArrayBufferLike|Uint8Array, arg1?: SessionOptions|number, arg2?: number,\n      arg3?: SessionOptions): Promise<InferenceSessionInterface> {\n    TRACE_FUNC_BEGIN();\n    // either load from a file or buffer\n    let filePathOrUint8Array: string|Uint8Array;\n    let options: SessionOptions = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (\n        arg0 instanceof ArrayBuffer ||\n        (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError('\\'byteOffset\\' must be an integer.');\n        }\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n        byteLength = arg0.byteLength - byteOffset;\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError('\\'byteLength\\' must be an integer.');\n          }\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'byteLength\\' must be a number.');\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n    }\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n    TRACE_FUNC_END();\n    return new InferenceSession(handler);\n  }\n\n  startProfiling(): void {\n    this.handler.startProfiling();\n  }\n  endProfiling(): void {\n    this.handler.endProfiling();\n  }\n\n  get inputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get outputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  private handler: InferenceSessionHandler;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession as InferenceSessionImpl} from './inference-session-impl.js';\nimport {OnnxModelOptions} from './onnx-model.js';\nimport {OnnxValue, OnnxValueDataLocation} from './onnx-value.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace InferenceSession {\n  // #region input/output types\n\n  type OnnxValueMapType = {readonly [name: string]: OnnxValue};\n  type NullableOnnxValueMapType = {readonly [name: string]: OnnxValue | null};\n\n  /**\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\n   */\n  type FeedsType = OnnxValueMapType;\n\n  /**\n   * A fetches (model outputs) could be one of the following:\n   *\n   * - Omitted. Use model's output names definition.\n   * - An array of string indicating the output names.\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\n   *\n   * @remark\n   * different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\n   * internally.\n   */\n  type FetchesType = readonly string[]|NullableOnnxValueMapType;\n\n  /**\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\n   */\n  type ReturnType = OnnxValueMapType;\n\n  // #endregion\n\n  // #region session options\n\n  /**\n   * A set of configurations for session behavior.\n   */\n  export interface SessionOptions extends OnnxModelOptions {\n    /**\n     * An array of execution provider options.\n     *\n     * An execution provider option can be a string indicating the name of the execution provider,\n     * or an object of corresponding type.\n     */\n    executionProviders?: readonly ExecutionProviderConfig[];\n\n    /**\n     * The intra OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    intraOpNumThreads?: number;\n\n    /**\n     * The inter OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    interOpNumThreads?: number;\n\n    /**\n     * The free dimension override.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    freeDimensionOverrides?: {readonly [dimensionName: string]: number};\n\n    /**\n     * The optimization level.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    graphOptimizationLevel?: 'disabled'|'basic'|'extended'|'all';\n\n    /**\n     * Whether enable CPU memory arena.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableCpuMemArena?: boolean;\n\n    /**\n     * Whether enable memory pattern.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableMemPattern?: boolean;\n\n    /**\n     * Execution mode.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    executionMode?: 'sequential'|'parallel';\n\n    /**\n     * Optimized model file path.\n     *\n     * If this setting is specified, the optimized model will be dumped. In browser, a blob will be created\n     * with a pop-up window.\n     */\n    optimizedModelFilePath?: string;\n\n    /**\n     * Whether enable profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    enableProfiling?: boolean;\n\n    /**\n     * File prefix for profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    profileFilePrefix?: string;\n\n    /**\n     * Log ID.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logId?: string;\n\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Specify string as a preferred data location for all outputs, or an object that use output names as keys and a\n     * preferred data location as corresponding values.\n     *\n     * This setting is available only in ONNXRuntime Web for WebGL and WebGPU EP.\n     */\n    preferredOutputLocation?: OnnxValueDataLocation|{readonly [outputName: string]: OnnxValueDataLocation};\n\n    /**\n     * Whether enable graph capture.\n     * This setting is available only in ONNXRuntime Web for WebGPU EP.\n     */\n    enableGraphCapture?: boolean;\n\n    /**\n     * Store configurations for a session. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_session_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     * ```js\n     * extra: {\n     *   session: {\n     *     set_denormal_as_zero: \"1\",\n     *     disable_prepacking: \"1\"\n     *   },\n     *   optimization: {\n     *     enable_gelu_approximation: \"1\"\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #region execution providers\n\n  // Currently, we have the following backends to support execution providers:\n  // Backend Node.js binding: supports 'cpu', 'dml' (win32), 'coreml' (macOS) and 'cuda' (linux).\n  // Backend WebAssembly: supports 'cpu', 'wasm', 'webgpu' and 'webnn'.\n  // Backend ONNX.js: supports 'webgl'.\n  // Backend React Native: supports 'cpu', 'xnnpack', 'coreml' (iOS), 'nnapi' (Android).\n  interface ExecutionProviderOptionMap {\n    coreml: CoreMLExecutionProviderOption;\n    cpu: CpuExecutionProviderOption;\n    cuda: CudaExecutionProviderOption;\n    dml: DmlExecutionProviderOption;\n    nnapi: NnapiExecutionProviderOption;\n    tensorrt: TensorRtExecutionProviderOption;\n    wasm: WebAssemblyExecutionProviderOption;\n    webgl: WebGLExecutionProviderOption;\n    webgpu: WebGpuExecutionProviderOption;\n    webnn: WebNNExecutionProviderOption;\n    qnn: QnnExecutionProviderOption;\n    xnnpack: XnnpackExecutionProviderOption;\n  }\n\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\n  type ExecutionProviderConfig =\n      ExecutionProviderOptionMap[ExecutionProviderName]|ExecutionProviderOption|ExecutionProviderName|string;\n\n  export interface ExecutionProviderOption {\n    readonly name: string;\n  }\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cpu';\n    useArena?: boolean;\n  }\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cuda';\n    deviceId?: number;\n  }\n  export interface DmlExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'dml';\n    deviceId?: number;\n  }\n  export interface TensorRtExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'tensorrt';\n    deviceId?: number;\n  }\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'wasm';\n  }\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgl';\n    // TODO: add flags\n  }\n  export interface XnnpackExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'xnnpack';\n  }\n  export interface WebGpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgpu';\n    preferredLayout?: 'NCHW'|'NHWC';\n  }\n\n  // #region WebNN options\n\n  interface WebNNExecutionProviderName extends ExecutionProviderOption {\n    readonly name: 'webnn';\n  }\n\n  /**\n   * Represents a set of options for creating a WebNN MLContext.\n   *\n   * @see https://www.w3.org/TR/webnn/#dictdef-mlcontextoptions\n   */\n  export interface WebNNContextOptions {\n    deviceType?: 'cpu'|'gpu'|'npu';\n    numThreads?: number;\n    powerPreference?: 'default'|'low-power'|'high-performance';\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider without MLContext.\n   */\n  export interface WebNNOptionsWithoutMLContext extends WebNNExecutionProviderName, WebNNContextOptions {\n    context?: never;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext.\n   *\n   * When MLContext is provided, the deviceType is also required so that the WebNN EP can determine the preferred\n   * channel layout.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext\n   */\n  export interface WebNNOptionsWithMLContext extends WebNNExecutionProviderName,\n                                                     Omit<WebNNContextOptions, 'deviceType'>,\n                                                     Required<Pick<WebNNContextOptions, 'deviceType'>> {\n    context: unknown /* MLContext */;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext which is created from GPUDevice.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext-gpudevice\n   */\n  export interface WebNNOptionsWebGpu extends WebNNExecutionProviderName {\n    context: unknown /* MLContext */;\n    gpuDevice: unknown /* GPUDevice */;\n  }\n\n  /**\n   * Options for WebNN execution provider.\n   */\n  export type WebNNExecutionProviderOption = WebNNOptionsWithoutMLContext|WebNNOptionsWithMLContext|WebNNOptionsWebGpu;\n\n  // #endregion\n\n  export interface QnnExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'qnn';\n    // TODO add flags\n  }\n  export interface CoreMLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'coreml';\n    /**\n     * The bit flags for CoreML execution provider.\n     *\n     * ```\n     * COREML_FLAG_USE_CPU_ONLY = 0x001\n     * COREML_FLAG_ENABLE_ON_SUBGRAPH = 0x002\n     * COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 0x004\n     * COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 0x008\n     * COREML_FLAG_CREATE_MLPROGRAM = 0x010\n     * ```\n     *\n     * See include/onnxruntime/core/providers/coreml/coreml_provider_factory.h for more details.\n     *\n     * This flag is available only in ONNXRuntime (Node.js binding).\n     */\n    coreMlFlags?: number;\n    /**\n     * Specify whether to use CPU only in CoreML EP.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    useCPUOnly?: boolean;\n    /**\n     * Specify whether to enable CoreML EP on subgraph.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    enableOnSubgraph?: boolean;\n    /**\n     * Specify whether to only enable CoreML EP for Apple devices with ANE (Apple Neural Engine).\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    onlyEnableDeviceWithANE?: boolean;\n  }\n  export interface NnapiExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'nnapi';\n    useFP16?: boolean;\n    useNCHW?: boolean;\n    cpuDisabled?: boolean;\n    cpuOnly?: boolean;\n  }\n  // #endregion\n\n  // #endregion\n\n  // #region run options\n\n  /**\n   * A set of configurations for inference run behavior\n   */\n  export interface RunOptions {\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Terminate all incomplete OrtRun calls as soon as possible if true\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    terminate?: boolean;\n\n    /**\n     * A tag for the Run() calls using this\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    tag?: string;\n\n    /**\n     * Set a single run configuration entry. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_run_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     *\n     * ```js\n     * extra: {\n     *   memory: {\n     *     enable_memory_arena_shrinkage: \"1\",\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #endregion\n\n  // #region value metadata\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface ValueMetadata {\n    // TBD\n  }\n\n  // #endregion\n}\n\n/**\n * Represent a runtime instance of an ONNX model.\n */\nexport interface InferenceSession {\n  // #region run()\n\n  /**\n   * Execute the model asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Execute the model asynchronously with the given feeds, fetches and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n\n  // #endregion\n\n  // #region profiling\n\n  /**\n   * Start profiling.\n   */\n  startProfiling(): void;\n\n  /**\n   * End profiling.\n   */\n  endProfiling(): void;\n\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded model.\n   */\n  readonly inputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded model.\n   */\n  readonly outputNames: readonly string[];\n\n  // /**\n  //  * Get input metadata of the loaded model.\n  //  */\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // /**\n  //  * Get output metadata of the loaded model.\n  //  */\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // #endregion\n}\n\nexport interface InferenceSessionFactory {\n  // #region create()\n\n  /**\n   * Create a new inference session and load model asynchronously from an ONNX model file.\n   *\n   * @param uri - The URI or file path of the model to load.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\n   * @param byteLength - The length in bytes of the array buffer.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from a Uint8Array.\n   *\n   * @param buffer - A Uint8Array representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OptionsFormat, OptionsNormalizationParameters, OptionsTensorLayout} from './tensor-factory.js';\n\nexport interface TensorToDataUrlOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface TensorToImageDataOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface ConversionUtils {\n  /**\n   * creates a DataURL instance from tensor\n   *\n   * @param options - An optional object representing options for creating a DataURL instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns a DataURL string representing the image converted from tensor data\n   */\n  toDataURL(options?: TensorToDataUrlOptions): string;\n\n  /**\n   * creates an ImageData instance from tensor\n   *\n   * @param options - An optional object representing options for creating an ImageData instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns an ImageData instance representing the image converted from tensor data\n   */\n  toImageData(options?: TensorToImageDataOptions): ImageData;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TypedTensor} from './tensor.js';\n\nexport type ImageFormat = 'RGB'|'RGBA'|'BGR'|'RBG';\nexport type ImageTensorLayout = 'NHWC'|'NCHW';\n\n// the following region contains type definitions for constructing tensor from a specific location.\n\n// #region types for constructing a tensor from a specific location\n\n/**\n * represent common properties of the parameter for constructing a tensor from a specific location.\n */\ninterface CommonConstructorParameters<T> extends Pick<Tensor, 'dims'> {\n  /**\n   * Specify the data type of the tensor.\n   */\n  readonly type: T;\n}\n\n/**\n * represent the parameter for constructing a tensor from a GPU resource.\n */\ninterface GpuResourceConstructorParameters<T extends Tensor.Type> {\n  /**\n   * an optional callback function to download data from GPU to CPU.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  download?(): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * an optional callback function that will be called when the tensor is disposed.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  dispose?(): void;\n}\n\n/**\n * represent the parameter for constructing a tensor from a pinned CPU buffer\n */\nexport interface CpuPinnedConstructorParameters<T extends Tensor.CpuPinnedDataTypes = Tensor.CpuPinnedDataTypes> extends\n    CommonConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'cpu-pinned'.\n   */\n  readonly location: 'cpu-pinned';\n  /**\n   * Specify the CPU pinned buffer that holds the tensor data.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGL texture\n */\nexport interface TextureConstructorParameters<T extends Tensor.TextureDataTypes = Tensor.TextureDataTypes> extends\n    CommonConstructorParameters<T>, GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'texture'.\n   */\n  readonly location: 'texture';\n  /**\n   * Specify the WebGL texture that holds the tensor data.\n   */\n  readonly texture: Tensor.TextureType;\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGPU buffer\n */\nexport interface GpuBufferConstructorParameters<T extends Tensor.GpuBufferDataTypes = Tensor.GpuBufferDataTypes> extends\n    CommonConstructorParameters<T>, GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'gpu-buffer'.\n   */\n  readonly location: 'gpu-buffer';\n  /**\n   * Specify the WebGPU buffer that holds the tensor data.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n}\n\n// #endregion\n\n// the following region contains type definitions of each individual options.\n// the tensor factory functions use a composition of those options as the parameter type.\n\n// #region Options fields\n\nexport interface OptionsFormat {\n  /**\n   * Describes the image format represented in RGBA color space.\n   */\n  format?: ImageFormat;\n}\n\nexport interface OptionsTensorFormat {\n  /**\n   * Describes the image format of the tensor.\n   *\n   * NOTE: this is different from option 'format'. While option 'format' represents the original image, 'tensorFormat'\n   * represents the target format of the tensor. A transpose will be performed if they are different.\n   */\n  tensorFormat?: ImageFormat;\n}\n\nexport interface OptionsTensorDataType {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: 'float32'|'uint8';\n}\n\nexport interface OptionsTensorLayout {\n  /**\n   * Describes the tensor layout when representing data of one or more image(s).\n   */\n  tensorLayout?: ImageTensorLayout;\n}\n\nexport interface OptionsDimensions {\n  /**\n   * Describes the image height in pixel\n   */\n  height?: number;\n  /**\n   * Describes the image width in pixel\n   */\n  width?: number;\n}\n\nexport interface OptionResizedDimensions {\n  /**\n   * Describes the resized height. If omitted, original height will be used.\n   */\n  resizedHeight?: number;\n  /**\n   * Describes resized width - can be accessed via tensor dimensions as well\n   */\n  resizedWidth?: number;\n}\n\nexport interface OptionsNormalizationParameters {\n  /**\n   * Describes normalization parameters when preprocessing the image as model input.\n   *\n   * Data element are ranged from 0 to 255.\n   */\n  norm?: {\n    /**\n     * The 'bias' value for image normalization.\n     * - If omitted, use default value 0.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    bias?: number|[number, number, number]|[number, number, number, number];\n    /**\n     * The 'mean' value for image normalization.\n     * - If omitted, use default value 255.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    mean?: number | [number, number, number] | [number, number, number, number];\n  };\n}\n\n// #endregion\n\n// #region Options composition\n\nexport interface TensorFromImageDataOptions extends OptionResizedDimensions, OptionsTensorFormat, OptionsTensorLayout,\n                                                    OptionsTensorDataType, OptionsNormalizationParameters {}\n\nexport interface TensorFromImageElementOptions extends OptionResizedDimensions, OptionsTensorFormat,\n                                                       OptionsTensorLayout, OptionsTensorDataType,\n                                                       OptionsNormalizationParameters {}\n\nexport interface TensorFromUrlOptions extends OptionsDimensions, OptionResizedDimensions, OptionsTensorFormat,\n                                              OptionsTensorLayout, OptionsTensorDataType,\n                                              OptionsNormalizationParameters {}\n\nexport interface TensorFromImageBitmapOptions extends OptionResizedDimensions, OptionsTensorFormat, OptionsTensorLayout,\n                                                      OptionsTensorDataType, OptionsNormalizationParameters {}\n\nexport interface TensorFromTextureOptions<T extends Tensor.TextureDataTypes> extends\n    Required<OptionsDimensions>, OptionsFormat, GpuResourceConstructorParameters<T>/* TODO: add more */ {}\n\nexport interface TensorFromGpuBufferOptions<T extends Tensor.GpuBufferDataTypes> extends\n    Pick<Tensor, 'dims'>, GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\n// #endregion\n\n/**\n * type TensorFactory defines the factory functions of 'Tensor' to create tensor instances from existing data or\n * resources.\n */\nexport interface TensorFactory {\n  /**\n   * create a tensor from an ImageData object\n   *\n   * @param imageData - the ImageData object to create tensor from\n   * @param options - An optional object representing options for creating tensor from ImageData.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(imageData: ImageData, options?: TensorFromImageDataOptions):\n      Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a HTMLImageElement object\n   *\n   * @param imageElement - the HTMLImageElement object to create tensor from\n   * @param options - An optional object representing options for creating tensor from HTMLImageElement.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(imageElement: HTMLImageElement, options?: TensorFromImageElementOptions):\n      Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from URL\n   *\n   * @param urlSource - a string as a URL to the image or a data URL containing the image data.\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(urlSource: string, options?: TensorFromUrlOptions): Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from an ImageBitmap object\n   *\n   * @param bitmap - the ImageBitmap object to create tensor from\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(bitmap: ImageBitmap, options: TensorFromImageBitmapOptions):\n      Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a WebGL texture\n   *\n   * @param texture - the WebGLTexture object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGL texture.\n   *\n   * The options include following properties:\n   * - `width`: the width of the texture. Required.\n   * - `height`: the height of the texture. Required.\n   * - `format`: the format of the texture. If omitted, assume 'RGBA'.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromTexture<T extends Tensor.TextureDataTypes = 'float32'>(\n      texture: Tensor.TextureType, options: TensorFromTextureOptions<T>): TypedTensor<'float32'>;\n\n  /**\n   * create a tensor from a WebGPU buffer\n   *\n   * @param buffer - the GPUBuffer object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGPU buffer.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromGpuBuffer<T extends Tensor.GpuBufferDataTypes>(\n      buffer: Tensor.GpuBufferType, options: TensorFromGpuBufferOptions<T>): TypedTensor<T>;\n\n  /**\n   * create a tensor from a pre-allocated buffer. The buffer will be used as a pinned buffer.\n   *\n   * @param type - the tensor element type.\n   * @param buffer - a TypedArray corresponding to the type.\n   * @param dims - specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   *\n   * @returns a tensor object\n   */\n  fromPinnedBuffer<T extends Exclude<Tensor.Type, 'string'>>(\n      type: T, buffer: Tensor.DataTypeMap[T], dims?: readonly number[]): TypedTensor<T>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * A string that represents a file's URL or path.\n *\n * Path is vailable only in onnxruntime-node or onnxruntime-web running in Node.js.\n */\nexport type FileUrlOrPath = string;\n\n/**\n * A Blob object that represents a file.\n */\nexport type FileBlob = Blob;\n\n/**\n * A Uint8Array, ArrayBuffer or SharedArrayBuffer object that represents a file content.\n *\n * When it is an ArrayBuffer or SharedArrayBuffer, the whole buffer is assumed to be the file content.\n */\nexport type FileData = Uint8Array|ArrayBufferLike;\n\n/**\n * Represents a file that can be loaded by the ONNX Runtime JavaScript API.\n */\nexport type FileType = FileUrlOrPath|FileBlob|FileData;\n\n/**\n * Represents an external data file.\n */\nexport interface ExternalDataFileDescription {\n  /**\n   * Specify the external data file.\n   */\n  data: FileType;\n  /**\n   * Specify the file path.\n   */\n  path: string;\n}\n\n/**\n * Represents an external data file.\n *\n * When using a string, it should be a file URL or path that in the same directory as the model file.\n */\nexport type ExternalDataFileType = ExternalDataFileDescription|FileUrlOrPath;\n\n/**\n * Options for model loading.\n */\nexport interface OnnxModelOptions {\n  /**\n   * Specifying a list of files that represents the external data.\n   */\n  externalData?: readonly ExternalDataFileType[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from './tensor.js';\n\nexport type NonTensorType = never;\n\n/**\n * Type OnnxValue Represents both tensors and non-tensors value for model's inputs/outputs.\n *\n * NOTE: currently not support non-tensor\n */\nexport type OnnxValue = Tensor|NonTensorType;\n\n/**\n * Type OnnxValueDataLocation represents the location of the data of an OnnxValue.\n */\nexport type OnnxValueDataLocation = Tensor.DataLocation;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {resolveBackendAndExecutionProviders} from './backend-impl.js';\nimport {SessionHandler, TrainingSessionHandler} from './backend.js';\nimport {InferenceSession as InferenceSession} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {Tensor} from './tensor.js';\nimport {TrainingSession as TrainingSessionInterface, TrainingSessionCreateOptions} from './training-session.js';\n\ntype SessionOptions = InferenceSession.SessionOptions;\ntype FeedsType = InferenceSession.FeedsType;\ntype FetchesType = InferenceSession.FetchesType;\ntype ReturnType = InferenceSession.ReturnType;\ntype RunOptions = InferenceSession.RunOptions;\n\nconst noBackendErrMsg: string = 'Training backend could not be resolved. ' +\n    'Make sure you\\'re using the correct configuration & WebAssembly files.';\n\nexport class TrainingSession implements TrainingSessionInterface {\n  private constructor(handler: TrainingSessionHandler, hasOptimizerModel: boolean, hasEvalModel: boolean) {\n    this.handler = handler;\n    this.hasOptimizerModel = hasOptimizerModel;\n    this.hasEvalModel = hasEvalModel;\n  }\n  private handler: TrainingSessionHandler;\n  private hasOptimizerModel: boolean;\n  private hasEvalModel: boolean;\n\n  get trainingInputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get trainingOutputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  get evalInputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalInputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n  get evalOutputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalOutputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n\n  static async create(trainingOptions: TrainingSessionCreateOptions, sessionOptions?: SessionOptions):\n      Promise<TrainingSession> {\n    const evalModel: string|Uint8Array = trainingOptions.evalModel || '';\n    const optimizerModel: string|Uint8Array = trainingOptions.optimizerModel || '';\n    const options: SessionOptions = sessionOptions || {};\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    if (backend.createTrainingSessionHandler) {\n      const handler = await backend.createTrainingSessionHandler(\n          trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel,\n          optionsWithValidatedEPs);\n      return new TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);\n    } else {\n      throw new Error(noBackendErrMsg);\n    }\n  }\n\n  /**\n   * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from\n   * the given parameters to SessionHandler.FetchesType and RunOptions.\n   *\n   * @param inputNames the feeds object is checked that they contain all input names in the provided list of input\n   * names.\n   * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output\n   * names.\n   * @param feeds the required input\n   * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object\n   * @param arg2 optional RunOptions object.\n   * @returns\n   */\n  typeNarrowingForRunStep(\n      inputNames: readonly string[], outputNames: readonly string[], feeds: FeedsType, arg1?: FetchesType|RunOptions,\n      arg2?: RunOptions): [SessionHandler.FetchesType, RunOptions] {\n    const fetches: {[name: string]: OnnxValue|null} = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\n          }\n          if (outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'options\\' must be an object.');\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSession.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n    }\n\n    // check if all inputs are in feed\n    for (const name of inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    return [fetches, options];\n  }\n\n  /**\n   * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler\n   * and changes it into a map of Tensors.\n   *\n   * @param results\n   * @returns\n   */\n  convertHandlerReturnTypeToMapOfTensors(results: SessionHandler.ReturnType): ReturnType {\n    const returnValue: {[name: string]: OnnxValue} = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    return returnValue;\n  }\n\n  async lazyResetGrad(): Promise<void> {\n    await this.handler.lazyResetGrad();\n  }\n\n  runTrainStep(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  runTrainStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async runTrainStep(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    const [fetches, options] =\n        this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);\n    const results = await this.handler.runTrainStep(feeds, fetches, options);\n    return this.convertHandlerReturnTypeToMapOfTensors(results);\n  }\n\n  async runOptimizerStep(options?: InferenceSession.RunOptions|undefined): Promise<void> {\n    if (this.hasOptimizerModel) {\n      await this.handler.runOptimizerStep(options || {});\n    } else {\n      throw new Error('This TrainingSession has no OptimizerModel loaded.');\n    }\n  }\n\n  runEvalStep(feeds: FeedsType, options?: RunOptions|undefined): Promise<ReturnType>;\n  runEvalStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions|undefined): Promise<ReturnType>;\n  async runEvalStep(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    if (this.hasEvalModel) {\n      const [fetches, options] =\n          this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);\n      const results = await this.handler.runEvalStep(feeds, fetches, options);\n      return this.convertHandlerReturnTypeToMapOfTensors(results);\n    } else {\n      throw new Error('This TrainingSession has no EvalModel loaded.');\n    }\n  }\n\n  async getParametersSize(trainableOnly = true): Promise<number> {\n    return this.handler.getParametersSize(trainableOnly);\n  }\n\n  async loadParametersBuffer(array: Uint8Array, trainableOnly = true): Promise<void> {\n    const paramsSize = await this.getParametersSize(trainableOnly);\n    // checking that the size of the Uint8Array is equivalent to the byte length of a Float32Array of the number\n    // of parameters\n    if (array.length !== 4 * paramsSize) {\n      throw new Error(\n          'Size of the buffer passed into loadParametersBuffer must match the number of parameters in ' +\n          'the model. Please use getParametersSize method to check.');\n    }\n    return this.handler.loadParametersBuffer(array, trainableOnly);\n  }\n\n  async getContiguousParameters(trainableOnly = true): Promise<OnnxValue> {\n    return this.handler.getContiguousParameters(trainableOnly);\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {TrainingSession as TrainingSessionImpl} from './training-session-impl.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace TrainingSession {\n  /**\n   * Either URI file path (string) or Uint8Array containing model or checkpoint information.\n   */\n  type UriOrBuffer = string|Uint8Array;\n}\n\n/**\n * Represent a runtime instance of an ONNX training session,\n * which contains a model that can be trained, and, optionally,\n * an eval and optimizer model.\n */\nexport interface TrainingSession {\n  // #region run()\n\n  /**\n   * Lazily resets the gradients of all trainable parameters to zero. Should happen after the invocation of\n   * runOptimizerStep.\n   */\n  lazyResetGrad(): Promise<void>;\n\n  /**\n   * Run TrainStep asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for\n   detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  runTrainStep(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions):\n      Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single train step with the given inputs and options.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runTrainStep(\n      feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Runs a single optimizer step, which performs weight updates for the trainable parameters using the optimizer model.\n   *\n   * @param options - Optional. A set of options that controls the behavior of model optimizing.\n   */\n  runOptimizerStep(options?: InferenceSession.RunOptions): Promise<void>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions):\n      Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(\n      feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region copy parameters\n\n  /**\n   * Retrieves the size of all parameters for the training state. Calculates the total number of primitive (datatype of\n   * the parameters) elements of all the parameters in the training state.\n   *\n   * @param trainableOnly - When set to true, the size is calculated for trainable params only. Default value is true.\n   */\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n\n  /**\n   * Copies parameter values from the given buffer to the training state. Currently, only supporting models with\n   * parameters of type Float32.\n   *\n   * @param buffer - A Uint8Array representation of Float32 parameters.\n   * @param trainableOnly - True if trainable parameters only to be modified, false otherwise. Default value is true.\n   */\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n\n  /**\n   * Copies the model parameters to a contiguous buffer. Usually used in the context of Federated Learning.\n   * Currently, only supporting models with parameters of type Float32.\n   *\n   * @param trainableOnly - When set to true, only trainable parameters are copied. Trainable parameters are parameters\n   * for which requires_grad is set to true. Default value is true.\n   * @returns A promise that resolves to a Float32 OnnxValue of the requested parameters.\n   */\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded training model.\n   */\n  readonly trainingInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded training model.\n   */\n  readonly trainingOutputNames: readonly string[];\n\n  /**\n   * Get input names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalOutputNames: readonly string[];\n\n  // #endregion\n}\n\n/**\n * Represents the optional parameters that can be passed into the TrainingSessionFactory.\n */\nexport interface TrainingSessionCreateOptions {\n  /**\n   * URI or buffer for a .ckpt file that contains the checkpoint for the training model.\n   */\n  checkpointState: TrainingSession.UriOrBuffer;\n  /**\n   * URI or buffer for the .onnx training file.\n   */\n  trainModel: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx optimizer model file.\n   */\n  optimizerModel?: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx eval model file.\n   */\n  evalModel?: TrainingSession.UriOrBuffer;\n}\n\n/**\n * Defines method overload possibilities for creating a TrainingSession.\n */\nexport interface TrainingSessionFactory {\n  // #region create()\n\n  /**\n   * Creates a new TrainingSession and asynchronously loads any models passed in through trainingOptions\n   *\n   * @param trainingOptions specify models and checkpoints to load into the Training Session\n   * @param sessionOptions specify configuration for training session behavior\n   *\n   * @returns Promise that resolves to a TrainingSession object\n   */\n  create(trainingOptions: TrainingSessionCreateOptions, sessionOptions?: InferenceSession.SessionOptions):\n      Promise<TrainingSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const TrainingSession: TrainingSessionFactory = TrainingSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript/)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n\nexport * from './backend.js';\nexport * from './env.js';\nexport * from './inference-session.js';\nexport * from './tensor.js';\nexport * from './tensor-conversion.js';\nexport * from './tensor-factory.js';\nexport * from './trace.js';\nexport * from './onnx-model.js';\nexport * from './onnx-value.js';\nexport * from './training-session.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, _stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional parameter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((_d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordinates\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const enum EncoderUsage {\n  Default = 0,\n  UploadOnly,\n  Download4BytesAsFloat32,\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {EncoderUsage} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, EncoderUsage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, EncoderUsage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, EncoderUsage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, EncoderUsage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: EncoderUsage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private key: string;\n  public get cacheKey(): string {\n    if (!this.key) {\n      this.key =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this.key;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (_handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((_s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((_s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (_handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (_handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (_handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, _name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (_inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((_val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (_inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((_v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((_v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (_handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (_d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((_s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordinates (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder, EncoderUsage} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: EncoderUsage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === EncoderUsage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === EncoderUsage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(_dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder, EncoderUsage} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: EncoderUsage = EncoderUsage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === EncoderUsage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      if (!env.webgl.context) {\n        Object.defineProperty(env.webgl, 'context', {value: this.glContext.gl});\n      }\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Running op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((_output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n              nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specified node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    let onnxError: Error|undefined;\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n        onnxError = e;\n      }\n    }\n\n    try {\n      this.loadFromOrtFormat(buf, graphInitializer);\n    } catch (e) {\n      if (isOrtFormat !== undefined) {\n        throw e;\n      }\n      // Tried both formats and failed (when isOrtFormat === undefined)\n      throw new Error(`Failed to load model as ONNX format: ${onnxError}\\nas ORT format: ${e}`);\n    }\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const {readFile} = require('node:fs/promises');\n          const buf = await readFile(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, InferenceSessionHandler, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements InferenceSessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, InferenceSessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler-inference';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createInferenceSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const isNode = !!(typeof process !== 'undefined' && process.versions && process.versions.node);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/// <reference lib=\"webworker\" />\n\n//\n// * type hack for \"HTMLImageElement\"\n//\n// in typescript, the type of \"HTMLImageElement\" is defined in lib.dom.d.ts, which is conflict with lib.webworker.d.ts.\n// when we use webworker, the lib.webworker.d.ts will be used, which does not have HTMLImageElement defined.\n//\n// we will get the following errors complaining that HTMLImageElement is not defined:\n//\n// ====================================================================================================================\n//\n// ../common/dist/cjs/tensor-factory.d.ts:187:29 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 187     fromImage(imageElement: HTMLImageElement, options?: TensorFromImageElementOptions):\n// Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n//                                 ~~~~~~~~~~~~~~~~\n//\n// node_modules/@webgpu/types/dist/index.d.ts:83:7 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 83     | HTMLImageElement\n//          ~~~~~~~~~~~~~~~~\n//\n// ====================================================================================================================\n//\n// `HTMLImageElement` is only used in type declaration and not in real code. So we define it as `unknown` here to\n// bypass the type check.\n\n//\n// * type hack for \"document\"\n//\n// in typescript, the type of \"document\" is defined in lib.dom.d.ts, so it's not available in webworker.\n//\n// we will get the following errors complaining that document is not defined:\n//\n// ====================================================================================================================\n//\n// lib/wasm/wasm-utils-import.ts:7:33 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                   ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:61 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                               ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:88 - error TS2552: Cannot find name 'HTMLScriptElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                                                          ~~~~~~~~~~~~~~~~~\n// ====================================================================================================================\n//\n// `document` is used to get the current script URL, which is not available in webworker. This file is served as a\n// \"dual\" file for entries of both webworker and the esm module.\n//\ndeclare global {\n  type HTMLImageElement = unknown;\n  type HTMLScriptElement = {src?: string};\n  const document: undefined|{currentScript?: HTMLScriptElement};\n}\n\n/**\n * @summary\n *\n * This file is served as a \"dual\" file for both entries of the following:\n * - The proxy worker itself.\n *   - When used as a worker, it listens to the messages from the main thread and performs the corresponding operations.\n *   - Should be imported directly using `new Worker()` in the main thread.\n *\n * - The ESM module that creates the proxy worker (as a worker launcher).\n *   - When used as a worker launcher, it creates the proxy worker and returns it.\n *   - Should be imported using `import()` in the main thread, with the query parameter `import=1`.\n *\n * This file will be always compiling into ESM format.\n */\n\nimport type {OrtWasmMessage, SerializableTensorMetadata} from '../proxy-messages.js';\nimport {createSession, copyFromExternalBuffer, endProfiling, extractTransferableBuffers, initEp, initRuntime, releaseSession, run} from '../wasm-core-impl.js';\nimport {initializeWebAssembly} from '../wasm-factory.js';\nimport {scriptSrc} from '../wasm-utils-import.js';\n\nconst WORKER_NAME = 'ort-wasm-proxy-worker';\nconst isProxyWorker = globalThis.self?.name === WORKER_NAME;\n\nif (isProxyWorker) {\n  // Worker thread\n  self.onmessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n    const {type, in : message} = ev.data;\n    try {\n      switch (type) {\n        case 'init-wasm':\n          initializeWebAssembly(message!.wasm)\n              .then(\n                  () => {\n                    initRuntime(message!).then(\n                        () => {\n                          postMessage({type});\n                        },\n                        err => {\n                          postMessage({type, err});\n                        });\n                  },\n                  err => {\n                    postMessage({type, err});\n                  });\n          break;\n        case 'init-ep': {\n          const {epName, env} = message!;\n          initEp(env, epName)\n              .then(\n                  () => {\n                    postMessage({type});\n                  },\n                  err => {\n                    postMessage({type, err});\n                  });\n          break;\n        }\n        case 'copy-from': {\n          const {buffer} = message!;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({type, out: bufferData} as OrtWasmMessage);\n          break;\n        }\n        case 'create': {\n          const {model, options} = message!;\n          createSession(model, options)\n              .then(\n                  sessionMetadata => {\n                    postMessage({type, out: sessionMetadata} as OrtWasmMessage);\n                  },\n                  err => {\n                    postMessage({type, err});\n                  });\n          break;\n        }\n        case 'release':\n          releaseSession(message!);\n          postMessage({type});\n          break;\n        case 'run': {\n          const {sessionId, inputIndices, inputs, outputIndices, options} = message!;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options)\n              .then(\n                  outputs => {\n                    if (outputs.some(o => o[3] !== 'cpu')) {\n                      postMessage({type, err: 'Proxy does not support non-cpu tensor location.'});\n                    } else {\n                      postMessage(\n                          {type, out: outputs} as OrtWasmMessage,\n                          extractTransferableBuffers([...inputs, ...outputs] as SerializableTensorMetadata[]));\n                    }\n                  },\n                  err => {\n                    postMessage({type, err});\n                  });\n          break;\n        }\n        case 'end-profiling':\n          endProfiling(message!);\n          postMessage({type});\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({type, err} as OrtWasmMessage);\n    }\n  };\n}\n\nexport default isProxyWorker ?\n    null :\n    (urlOverride?: string) =>\n        new Worker(urlOverride ?? scriptSrc!, {type: BUILD_DEFS.IS_ESM ? 'module' : 'classic', name: WORKER_NAME});\n","var e,t=(e=import.meta.url,async function(t={}){function r(){return C.buffer!=R.buffer&&H(),R}function n(){return C.buffer!=R.buffer&&H(),U}function a(){return C.buffer!=R.buffer&&H(),Y}function o(){return C.buffer!=R.buffer&&H(),W}function i(){return C.buffer!=R.buffer&&H(),k}var s,u,f=Object.assign({},t),l=new Promise(((e,t)=>{s=e,u=t})),c=\"object\"==typeof window,d=\"function\"==typeof importScripts,g=d&&\"em-pthread\"==self.name;f.mountExternalData=(e,t)=>{(f.Ua||(f.Ua=new Map)).set(e,t)},f.unmountExternalData=()=>{delete f.Ua};var h,m,p=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor,v=Object.assign({},f),b=\"./this.program\",w=(e,t)=>{throw t},O=\"\";(c||d)&&(d?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),e&&(O=e),O=O.startsWith(\"blob:\")?\"\":O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1),e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},d&&(m=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),h=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var y,_=console.log.bind(console),T=console.error.bind(console),M=_,A=T;if(Object.assign(f,v),v=null,g){var S,E=!1;function rr(e){try{var t=e.data,r=t.cmd;if(\"load\"===r){let e=[];self.onmessage=t=>e.push(t),self.startWorker=()=>{postMessage({cmd:\"loaded\"});for(let t of e)rr(t);self.onmessage=rr};for(const e of t.handlers)f[e]&&!f[e].proxy||(f[e]=(...t)=>{postMessage({Za:\"callHandler\",kb:e,args:t})},\"print\"==e&&(M=f[e]),\"printErr\"==e&&(A=f[e]));C=t.wasmMemory,H(),S(t.wasmModule)}else if(\"run\"===r){Lt(t.pthread_ptr,0,0,1,0,0),Ve(t.pthread_ptr),we(),he(),E||=!0;try{ye(t.start_routine,t.arg)}catch(e){if(\"unwind\"!=e)throw e}}else\"cancel\"===r?Gt()&&Xt(-1):\"setimmediate\"!==t.target&&(\"checkMailbox\"===r?E&&Xe():r&&(A(`worker: received unknown command ${r}`),A(t)))}catch(e){throw zt(),e}}A=function(...e){e=e.join(\" \"),console.error(e)},self.alert=function(...e){postMessage({Za:\"alert\",text:e.join(\" \"),mb:Gt()})},f.instantiateWasm=(e,t)=>new Promise((e=>{S=r=>{r=new WebAssembly.Instance(r,J()),t(r),e()}})),self.onunhandledrejection=e=>{throw e.reason||e},self.onmessage=rr}f.wasmBinary&&(y=f.wasmBinary);var C,D,F,R,U,Y,W,x,k,B=!1;function H(){var e=C.buffer;f.HEAP8=R=new Int8Array(e),f.HEAP16=new Int16Array(e),f.HEAPU8=U=new Uint8Array(e),f.HEAPU16=new Uint16Array(e),f.HEAP32=Y=new Int32Array(e),f.HEAPU32=W=new Uint32Array(e),f.HEAPF32=new Float32Array(e),f.HEAPF64=k=new Float64Array(e),f.HEAP64=x=new BigInt64Array(e),f.HEAPU64=new BigUint64Array(e)}if(!g){if(!((C=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof p))throw A(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),Error(\"bad memory\");H()}var P=[],I=[],N=[],$=0,G=null,j=null;function L(){if(0==--$&&(null!==G&&(clearInterval(G),G=null),j)){var e=j;j=null,e()}}function z(e){throw A(e=\"Aborted(\"+e+\")\"),B=!0,F=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}var Q,V=e=>e.startsWith(\"data:application/octet-stream;base64,\"),X=e=>e.startsWith(\"file://\");function q(e){if(e==Q&&y)return new Uint8Array(y);if(m)return m(e);throw\"both async and sync fetching of the wasm failed\"}function Z(e,t,r){return function(e){if(!y&&(c||d)){if(\"function\"==typeof fetch&&!X(e))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw`failed to load wasm binary file at '${e}'`;return t.arrayBuffer()})).catch((()=>q(e)));if(h)return new Promise(((t,r)=>{h(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>q(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then(r,(e=>{A(`failed to asynchronously prepare wasm: ${e}`),z(e)}))}function J(){return{a:{j:ee,b:Te,E:Ae,g:De,V:Fe,A:We,C:xe,W:ke,T:Be,L:He,S:Pe,o:Ie,B:Ne,y:$e,U:Ge,z:je,_:Le,Z:ze,P:Qe,w:qe,F:Je,k:Ke,O:Ve,Y:et,I:tt,J:ot,K:it,G:st,H:ut,v:ft,q:ct,l:dt,p:gt,e:ht,X:pt,x:vt,d:mt,f:bt,i:wt,u:Ot,t:Mt,s:At,Q:Dt,R:Ft,D:ue,h:Rt,n:Ut,M:Yt,m:xt,a:C,r:ie,N:Pt,c:It}}}var K={821972:(e,t,r,a)=>{if(void 0===f||!f.Ua)return 1;if((e=Ce(e>>>0)).startsWith(\"./\")&&(e=e.substring(2)),!(e=f.Ua.get(e)))return 2;if(a>>>=0,(t>>>=0)+(r>>>=0)>e.byteLength)return 3;try{return n().set(e.subarray(t,t+r),a>>>0),0}catch{return 4}},822473:()=>\"undefined\"!=typeof wasmOffsetConverter};function ee(){return\"undefined\"!=typeof wasmOffsetConverter}function te(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}var re=e=>{e.terminate(),e.onmessage=()=>{}},ne=e=>{0==fe.length&&(pe(),me(fe[0]));var t=fe.pop();if(!t)return 6;le.push(t),de[e.Ra]=t,t.Ra=e.Ra;var r={cmd:\"run\",start_routine:e.cb,arg:e.ab,pthread_ptr:e.Ra};return t.postMessage(r,e.ib),0},ae=0,oe=(e,t,...r)=>{for(var n=2*r.length,a=er(),o=Kt(8*n),s=o>>>3,u=0;u<r.length;u++){var f=r[u];\"bigint\"==typeof f?(x[s+2*u]=1n,x[s+2*u+1]=f):(x[s+2*u]=0n,i()[s+2*u+1>>>0]=f)}return e=Qt(e,0,n,o,t),Jt(a),e};function ie(e){if(g)return oe(0,1,e);if(F=e,!(0<ae)){for(var t of le)re(t);for(t of fe)re(t);fe=[],le=[],de=[],B=!0}w(e,new te(e))}function se(e){if(g)return oe(1,0,e);ue(e)}var ue=e=>{if(F=e,g)throw se(e),\"unwind\";ie(e)},fe=[],le=[],ce=[],de={},ge=e=>{var t=e.Ra;delete de[t],fe.push(e),le.splice(le.indexOf(e),1),e.Ra=0,Vt(t)};function he(){ce.forEach((e=>e()))}var me=e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=Gt()){var a=de[r.targetThread];a?a.postMessage(r,r.transferList):A(`Internal error! Worker sent a message \"${n}\" to target pthread ${r.targetThread}, but that thread no longer exists!`)}else\"checkMailbox\"===n?Xe():\"spawnThread\"===n?ne(r):\"cleanupThread\"===n?ge(de[r.thread]):\"killThread\"===n?(r=r.thread,n=de[r],delete de[r],re(n),Vt(r),le.splice(le.indexOf(n),1),n.Ra=0):\"cancelThread\"===n?de[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(`Thread ${r.threadId}: ${r.text}`):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?f[r.handler](...r.args):n&&A(`worker sent an unknown command ${n}`)},e.onerror=e=>{throw A(`worker sent an error! ${e.filename}:${e.lineno}: ${e.message}`),e};var r,n=[];for(r of[])f.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,wasmMemory:C,wasmModule:D})}));function pe(){var e=new Worker(new URL(import.meta.url),{type:\"module\",workerData:\"em-pthread\",name:\"em-pthread\"});fe.push(e)}var ve,be=e=>{for(;0<e.length;)e.shift()(f)},we=()=>{var e=Gt(),t=o()[e+52>>>2>>>0];e=o()[e+56>>>2>>>0],Zt(t,t-e),Jt(t)},Oe=[],ye=(e,t)=>{ae=0;var r=Oe[e];r||(e>=Oe.length&&(Oe.length=e+1),Oe[e]=r=ve.get(e)),e=r(t),0<ae?F=e:Xt(e)};class _e{constructor(e){this.Xa=e-24}}function Te(e,t,r){var n=new _e(e>>>=0);throw t>>>=0,r>>>=0,o()[n.Xa+16>>>2>>>0]=0,o()[n.Xa+4>>>2>>>0]=t,o()[n.Xa+8>>>2>>>0]=r,e}function Me(e,t,r,n){return g?oe(2,1,e,t,r,n):Ae(e,t,r,n)}function Ae(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,void 0===p)return A(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return g&&0===a.length?Me(e,t,r,n):(e={cb:r,Ra:e,ab:n,ib:a},g?(e.Za=\"spawnThread\",postMessage(e,a),0):ne(e))}var Se=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Ee=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&Se)return Se.decode(e.buffer instanceof p?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},Ce=(e,t)=>(e>>>=0)?Ee(n(),e,t):\"\";function De(e,t,r){return g?oe(3,1,e,t,r):0}function Fe(e,t){if(g)return oe(4,1,e,t)}var Re=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Ue=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Ye=(e,t,r)=>Ue(e,n(),t,r);function We(e,t){if(g)return oe(5,1,e,t)}function xe(e,t,r){if(g)return oe(6,1,e,t,r)}function ke(e,t,r){return g?oe(7,1,e,t,r):0}function Be(e,t){if(g)return oe(8,1,e,t)}function He(e,t,r){if(g)return oe(9,1,e,t,r)}function Pe(e,t,r,n){if(g)return oe(10,1,e,t,r,n)}function Ie(e,t,r,n){if(g)return oe(11,1,e,t,r,n)}function Ne(e,t,r,n){if(g)return oe(12,1,e,t,r,n)}function $e(e){if(g)return oe(13,1,e)}function Ge(e,t){if(g)return oe(14,1,e,t)}function je(e,t,r){if(g)return oe(15,1,e,t,r)}var Le=()=>{z(\"\")},ze=()=>1;function Qe(e){Lt(e>>>0,!d,1,!c,131072,!1),he()}function Ve(e){e>>>=0,\"function\"==typeof Atomics.jb&&(Atomics.jb(a(),e>>>2,e).value.then(Xe),e+=128,Atomics.store(a(),e>>>2,1))}var Xe=()=>{var e=Gt();if(e&&(Ve(e),e=qt,!B))try{if(e(),!(0<ae))try{g?Xt(F):ue(F)}catch(e){e instanceof te||\"unwind\"==e||w(1,e)}}catch(e){e instanceof te||\"unwind\"==e||w(1,e)}};function qe(e,t){(e>>>=0)==t>>>0?setTimeout(Xe):g?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=de[e])&&e.postMessage({cmd:\"checkMailbox\"})}var Ze=[];function Je(e,t,r,n,a){for(t>>>=0,n/=2,Ze.length=n,r=a>>>0>>>3,a=0;a<n;a++)Ze[a]=x[r+2*a]?x[r+2*a+1]:i()[r+2*a+1>>>0];return(t?K[t]:Nt[e])(...Ze)}function Ke(e){e>>>=0,g?postMessage({cmd:\"cleanupThread\",thread:e}):ge(de[e])}function et(e){}function tt(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),a()[t>>>2>>>0]=e.getUTCSeconds(),a()[t+4>>>2>>>0]=e.getUTCMinutes(),a()[t+8>>>2>>>0]=e.getUTCHours(),a()[t+12>>>2>>>0]=e.getUTCDate(),a()[t+16>>>2>>>0]=e.getUTCMonth(),a()[t+20>>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>>2>>>0]=e}var rt=e=>0==e%4&&(0!=e%100||0==e%400),nt=[0,31,60,91,121,152,182,213,244,274,305,335],at=[0,31,59,90,120,151,181,212,243,273,304,334];function ot(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),a()[t>>>2>>>0]=e.getSeconds(),a()[t+4>>>2>>>0]=e.getMinutes(),a()[t+8>>>2>>>0]=e.getHours(),a()[t+12>>>2>>>0]=e.getDate(),a()[t+16>>>2>>>0]=e.getMonth(),a()[t+20>>>2>>>0]=e.getFullYear()-1900,a()[t+24>>>2>>>0]=e.getDay();var r=(rt(e.getFullYear())?nt:at)[e.getMonth()]+e.getDate()-1|0;a()[t+28>>>2>>>0]=r,a()[t+36>>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>>2>>>0]=e}function it(e){e>>>=0;var t=new Date(a()[e+20>>>2>>>0]+1900,a()[e+16>>>2>>>0],a()[e+12>>>2>>>0],a()[e+8>>>2>>>0],a()[e+4>>>2>>>0],a()[e>>>2>>>0],0),r=a()[e+32>>>2>>>0],n=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(i,o);return 0>r?a()[e+32>>>2>>>0]=Number(o!=i&&s==n):0<r!=(s==n)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?s:o)-n))),a()[e+24>>>2>>>0]=t.getDay(),r=(rt(t.getFullYear())?nt:at)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>>2>>>0]=r,a()[e>>>2>>>0]=t.getSeconds(),a()[e+4>>>2>>>0]=t.getMinutes(),a()[e+8>>>2>>>0]=t.getHours(),a()[e+12>>>2>>>0]=t.getDate(),a()[e+16>>>2>>>0]=t.getMonth(),a()[e+20>>>2>>>0]=t.getYear(),e=t.getTime(),BigInt(isNaN(e)?-1:e/1e3)}function st(e,t,r,n,a,o,i){return g?oe(16,1,e,t,r,n,a,o,i):-52}function ut(e,t,r,n,a,o){if(g)return oe(17,1,e,t,r,n,a,o)}function ft(e,t,r,n){e>>>=0,t>>>=0,r>>>=0,n>>>=0;var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var f=u.getTimezoneOffset(),l=Math.max(i,f);o()[e>>>2>>>0]=60*l,a()[t>>>2>>>0]=Number(i!=f),s=(e=e=>e.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:\"short\"}).split(\" \")[1])(s),u=e(u),f<i?(Ye(s,r,17),Ye(u,n,17)):(Ye(s,n,17),Ye(u,r,17))}var lt=[];function ct(e,t,r){e>>>=0,t>>>=0,r>>>=0,lt.length=0;for(var s;s=n()[t++>>>0];){var u=105!=s;r+=(u&=112!=s)&&r%8?4:0,lt.push(112==s?o()[r>>>2>>>0]:106==s?x[r>>>3]:105==s?a()[r>>>2>>>0]:i()[r>>>3>>>0]),r+=u?8:4}return K[e](...lt)}var dt=()=>{},gt=()=>Date.now();function ht(e,t){return A(Ce(e>>>0,t>>>0))}var mt,pt=()=>{throw ae+=1,\"unwind\"};function vt(){return 4294901760}mt=()=>performance.timeOrigin+performance.now();var bt=()=>navigator.hardwareConcurrency;function wt(){return z(\"Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER\"),0}function Ot(e){e>>>=0;var t=n().length;if(e<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=(o.min.call(o,4294901760,a+(65536-a%65536)%65536)-C.buffer.byteLength+65535)/65536;try{C.grow(o),H();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1}var yt=()=>(z(\"Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER\"),0),_t={},Tt=e=>{e.forEach((e=>{var t=yt();t&&(_t[t]=e)}))};function Mt(){var e=Error().stack.toString().split(\"\\n\");return\"Error\"==e[0]&&e.shift(),Tt(e),_t.$a=yt(),_t.bb=e,_t.$a}function At(e,t,r){if(e>>>=0,t>>>=0,_t.$a==e)var n=_t.bb;else\"Error\"==(n=Error().stack.toString().split(\"\\n\"))[0]&&n.shift(),Tt(n);for(var o=3;n[o]&&yt()!=e;)++o;for(e=0;e<r&&n[e+o];++e)a()[t+4*e>>>2>>>0]=yt();return e}var St,Et={},Ct=()=>{if(!St){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:b||\"./this.program\"};for(e in Et)void 0===Et[e]?delete t[e]:t[e]=Et[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);St=r}return St};function Dt(e,t){if(g)return oe(18,1,e,t);e>>>=0,t>>>=0;var n=0;return Ct().forEach(((a,i)=>{var s=t+n;for(i=o()[e+4*i>>>2>>>0]=s,s=0;s<a.length;++s)r()[i++>>>0]=a.charCodeAt(s);r()[i>>>0]=0,n+=a.length+1})),0}function Ft(e,t){if(g)return oe(19,1,e,t);e>>>=0,t>>>=0;var r=Ct();o()[e>>>2>>>0]=r.length;var n=0;return r.forEach((e=>n+=e.length+1)),o()[t>>>2>>>0]=n,0}function Rt(e){return g?oe(20,1,e):52}function Ut(e,t,r,n){return g?oe(21,1,e,t,r,n):52}function Yt(e,t,r,n){return g?oe(22,1,e,t,r,n):70}var Wt=[null,[],[]];function xt(e,t,r,a){if(g)return oe(23,1,e,t,r,a);t>>>=0,r>>>=0,a>>>=0;for(var i=0,s=0;s<r;s++){var u=o()[t>>>2>>>0],f=o()[t+4>>>2>>>0];t+=8;for(var l=0;l<f;l++){var c=n()[u+l>>>0],d=Wt[e];0===c||10===c?((1===e?M:A)(Ee(d,0)),d.length=0):d.push(c)}i+=f}return o()[a>>>2>>>0]=i,0}var kt=[31,29,31,30,31,30,31,31,30,31,30,31],Bt=[31,28,31,30,31,30,31,31,30,31,30,31],Ht=(e,t)=>{r().set(e,t>>>0)};function Pt(e,t,r,n){function i(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function s(e,t){return i(e,t,\"0\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Sa;for(e=new Date(new Date(e.Ta+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(rt(e.getFullYear())?kt:Bt)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=f(new Date(e.getFullYear(),0,4)),r=f(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,n>>>=0;var c=o()[n+40>>>2>>>0];for(var d in n={gb:a()[n>>>2>>>0],fb:a()[n+4>>>2>>>0],Va:a()[n+8>>>2>>>0],Ya:a()[n+12>>>2>>>0],Wa:a()[n+16>>>2>>>0],Ta:a()[n+20>>>2>>>0],Qa:a()[n+24>>>2>>>0],Sa:a()[n+28>>>2>>>0],nb:a()[n+32>>>2>>>0],eb:a()[n+36>>>2>>>0],hb:c?Ce(c):\"\"},r=Ce(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(d,\"g\"),c[d]);var g=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(d in c={\"%a\":e=>g[e.Qa].substring(0,3),\"%A\":e=>g[e.Qa],\"%b\":e=>h[e.Wa].substring(0,3),\"%B\":e=>h[e.Wa],\"%C\":e=>s((e.Ta+1900)/100|0,2),\"%d\":e=>s(e.Ya,2),\"%e\":e=>i(e.Ya,2,\" \"),\"%g\":e=>l(e).toString().substring(2),\"%G\":l,\"%H\":e=>s(e.Va,2),\"%I\":e=>(0==(e=e.Va)?e=12:12<e&&(e-=12),s(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Wa-1;t+=(rt(e.Ta+1900)?kt:Bt)[r++]);return s(e.Ya+t,3)},\"%m\":e=>s(e.Wa+1,2),\"%M\":e=>s(e.fb,2),\"%n\":()=>\"\\n\",\"%p\":e=>0<=e.Va&&12>e.Va?\"AM\":\"PM\",\"%S\":e=>s(e.gb,2),\"%t\":()=>\"\\t\",\"%u\":e=>e.Qa||7,\"%U\":e=>s(Math.floor((e.Sa+7-e.Qa)/7),2),\"%V\":e=>{var t=Math.floor((e.Sa+7-(e.Qa+6)%7)/7);if(2>=(e.Qa+371-e.Sa-2)%7&&t++,t)53==t&&(4==(r=(e.Qa+371-e.Sa)%7)||3==r&&rt(e.Ta)||(t=1));else{t=52;var r=(e.Qa+7-e.Sa-1)%7;(4==r||5==r&&rt(e.Ta%400-1))&&t++}return s(t,2)},\"%w\":e=>e.Qa,\"%W\":e=>s(Math.floor((e.Sa+7-(e.Qa+6)%7)/7),2),\"%y\":e=>(e.Ta+1900).toString().substring(2),\"%Y\":e=>e.Ta+1900,\"%z\":e=>{var t=0<=(e=e.eb);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.hb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\0\\0\"),c)r.includes(d)&&(r=r.replace(new RegExp(d,\"g\"),c[d](n)));return d=function(e){var t=Array(Re(e)+1);return Ue(e,t,0,t.length),t}(r=r.replace(/\\0\\0/g,\"%\")),d.length>t?0:(Ht(d,e),d.length-1)}function It(e,t,r,n){return Pt(e>>>0,t>>>0,r>>>0,n>>>0)}g||function(){for(var e=f.numThreads-1;e--;)pe();P.unshift((()=>{$++,function(e){g?e():Promise.all(fe.map(me)).then(e)}((()=>L()))}))}();var Nt=[ie,se,Me,De,Fe,We,xe,ke,Be,He,Pe,Ie,Ne,$e,Ge,je,st,ut,Dt,Ft,Rt,Ut,Yt,xt],$t=function(){function e(e,t){return $t=e.exports,$t=function(){var e=$t,t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).Ba=t(e.Ba),e.Ca=r(e.Ca),e.emscripten_main_runtime_thread_id=t(e.emscripten_main_runtime_thread_id),e.Oa=r(e.Oa),e.Pa=t(e.Pa),e}(),ce.push($t.Ea),ve=$t.Fa,I.unshift($t.$),D=t,L(),$t}var t=J();if($++,f.instantiateWasm)try{return f.instantiateWasm(t,e)}catch(e){A(`Module.instantiateWasm callback failed with error: ${e}`),u(e)}return Q||=f.locateFile?V(\"ort-wasm-simd-threaded.wasm\")?\"ort-wasm-simd-threaded.wasm\":f.locateFile?f.locateFile(\"ort-wasm-simd-threaded.wasm\",O):O+\"ort-wasm-simd-threaded.wasm\":new URL(\"ort-wasm-simd-threaded.wasm\",import.meta.url).href,function(e,t){var r=Q;return y||\"function\"!=typeof WebAssembly.instantiateStreaming||V(r)||X(r)||\"function\"!=typeof fetch?Z(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return A(`wasm streaming compile failed: ${n}`),A(\"falling back to ArrayBuffer instantiation\"),Z(r,e,t)}))))}(t,(function(t){e(t.instance,t.module)})).catch(u),{}}();f._OrtInit=(e,t)=>(f._OrtInit=$t.aa)(e,t),f._OrtGetLastError=(e,t)=>(f._OrtGetLastError=$t.ba)(e,t),f._OrtCreateSessionOptions=(e,t,r,n,a,o,i,s,u,l)=>(f._OrtCreateSessionOptions=$t.ca)(e,t,r,n,a,o,i,s,u,l),f._OrtAppendExecutionProvider=(e,t)=>(f._OrtAppendExecutionProvider=$t.da)(e,t),f._OrtAddFreeDimensionOverride=(e,t,r)=>(f._OrtAddFreeDimensionOverride=$t.ea)(e,t,r),f._OrtAddSessionConfigEntry=(e,t,r)=>(f._OrtAddSessionConfigEntry=$t.fa)(e,t,r),f._OrtReleaseSessionOptions=e=>(f._OrtReleaseSessionOptions=$t.ga)(e),f._OrtCreateSession=(e,t,r)=>(f._OrtCreateSession=$t.ha)(e,t,r),f._OrtReleaseSession=e=>(f._OrtReleaseSession=$t.ia)(e),f._OrtGetInputOutputCount=(e,t,r)=>(f._OrtGetInputOutputCount=$t.ja)(e,t,r),f._OrtGetInputName=(e,t)=>(f._OrtGetInputName=$t.ka)(e,t),f._OrtGetOutputName=(e,t)=>(f._OrtGetOutputName=$t.la)(e,t),f._OrtFree=e=>(f._OrtFree=$t.ma)(e),f._OrtCreateTensor=(e,t,r,n,a,o)=>(f._OrtCreateTensor=$t.na)(e,t,r,n,a,o),f._OrtGetTensorData=(e,t,r,n,a)=>(f._OrtGetTensorData=$t.oa)(e,t,r,n,a),f._OrtReleaseTensor=e=>(f._OrtReleaseTensor=$t.pa)(e),f._OrtCreateRunOptions=(e,t,r,n)=>(f._OrtCreateRunOptions=$t.qa)(e,t,r,n),f._OrtAddRunConfigEntry=(e,t,r)=>(f._OrtAddRunConfigEntry=$t.ra)(e,t,r),f._OrtReleaseRunOptions=e=>(f._OrtReleaseRunOptions=$t.sa)(e),f._OrtCreateBinding=e=>(f._OrtCreateBinding=$t.ta)(e),f._OrtBindInput=(e,t,r)=>(f._OrtBindInput=$t.ua)(e,t,r),f._OrtBindOutput=(e,t,r,n)=>(f._OrtBindOutput=$t.va)(e,t,r,n),f._OrtClearBoundOutputs=e=>(f._OrtClearBoundOutputs=$t.wa)(e),f._OrtReleaseBinding=e=>(f._OrtReleaseBinding=$t.xa)(e),f._OrtRunWithBinding=(e,t,r,n,a)=>(f._OrtRunWithBinding=$t.ya)(e,t,r,n,a),f._OrtRun=(e,t,r,n,a,o,i,s)=>(f._OrtRun=$t.za)(e,t,r,n,a,o,i,s),f._OrtEndProfiling=e=>(f._OrtEndProfiling=$t.Aa)(e);var Gt=()=>(Gt=$t.Ba)();f._malloc=e=>(f._malloc=$t.Ca)(e),f._free=e=>(f._free=$t.Da)(e);var jt,Lt=(e,t,r,n,a,o)=>(Lt=$t.Ga)(e,t,r,n,a,o),zt=()=>(zt=$t.Ha)(),Qt=(e,t,r,n,a)=>(Qt=$t.Ia)(e,t,r,n,a),Vt=e=>(Vt=$t.Ja)(e),Xt=e=>(Xt=$t.Ka)(e),qt=()=>(qt=$t.La)(),Zt=(e,t)=>(Zt=$t.Ma)(e,t),Jt=e=>(Jt=$t.Na)(e),Kt=e=>(Kt=$t.Oa)(e),er=()=>(er=$t.Pa)();function tr(){0<$||(g?(s(f),g||be(I),startWorker(f)):(be(P),0<$||jt||(jt=!0,f.calledRun=!0,B||(g||be(I),s(f),g||be(N)))))}return f.___start_em_js=822530,f.___stop_em_js=822591,f.stackSave=()=>er(),f.stackRestore=e=>Jt(e),f.stackAlloc=e=>Kt(e),f.UTF8ToString=Ce,f.stringToUTF8=Ye,f.lengthBytesUTF8=Re,j=function e(){jt||tr(),jt||(j=e)},tr(),l});export default t;\"em-pthread\"===globalThis.self?.name&&t();","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport type {OrtWasmModule} from './wasm-types';\nimport {isNode} from './wasm-utils-env';\n\n/**\n * The classic script source URL. This is not always available in non ESModule environments.\n *\n * In Node.js, this is undefined.\n */\nexport const scriptSrc =\n    // if Nodejs, return undefined\n    isNode ? undefined :\n             // if It's ESM, use import.meta.url\n             BUILD_DEFS.ESM_IMPORT_META_URL ??\n        // use `document.currentScript.src` if available\n        (typeof document !== 'undefined' ? (document.currentScript as HTMLScriptElement)?.src :\n                                           // use `self.location.href` if available\n                                           (typeof self !== 'undefined' ? self.location?.href : undefined));\n\n/**\n * The origin of the current location.\n *\n * In Node.js, this is undefined.\n */\nconst origin = isNode || typeof location === 'undefined' ? undefined : location.origin;\n\n/**\n * Check if the given filename with prefix is from the same origin.\n */\nconst isSameOrigin = (filename: string, prefixOverride?: string) => {\n  try {\n    const baseUrl = prefixOverride ?? scriptSrc;\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.origin === origin;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Normalize the inputs to an absolute URL with the given prefix override. If failed, return undefined.\n */\nconst normalizeUrl = (filename: string, prefixOverride?: string) => {\n  const baseUrl = prefixOverride ?? scriptSrc;\n  try {\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.href;\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * Create a fallback URL if an absolute URL cannot be created by the normalizeUrl function.\n */\nconst fallbackUrl = (filename: string, prefixOverride?: string) => `${prefixOverride ?? './'}${filename}`;\n\n/**\n * This helper function is used to preload a module from a URL.\n *\n * If the origin of the worker URL is different from the current origin, the worker cannot be loaded directly.\n * See discussions in https://github.com/webpack-contrib/worker-loader/issues/154\n *\n * In this case, we will fetch the worker URL and create a new Blob URL with the same origin as a workaround.\n *\n * @param absoluteUrl - The absolute URL to preload.\n *\n * @returns - A promise that resolves to a new Blob URL\n */\nconst preload = async(absoluteUrl: string): Promise<string> => {\n  const response = await fetch(absoluteUrl, {credentials: 'same-origin'});\n  const blob = await response.blob();\n  return URL.createObjectURL(blob);\n};\n\n/**\n * This helper function is used to dynamically import a module from a URL.\n *\n * The build script has special handling for this function to ensure that the URL is not bundled into the final output.\n *\n * @param url - The URL to import.\n *\n * @returns - A promise that resolves to the default export of the module.\n */\nconst dynamicImportDefault = async<T>(url: string): Promise<T> => (await import(/* webpackIgnore: true */ url)).default;\n\n/**\n * The proxy worker factory imported from the proxy worker module.\n *\n * This is only available when the WebAssembly proxy is not disabled.\n */\nconst createProxyWorker: ((urlOverride?: string) => Worker)|undefined =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    BUILD_DEFS.DISABLE_WASM_PROXY ? undefined : require('./proxy-worker/main').default;\n\n/**\n * Import the proxy worker.\n *\n * This function will perform the following steps:\n * 1. If a preload is needed, it will preload the module and return the object URL.\n * 2. Use the proxy worker factory to create the proxy worker.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The proxy worker.\n */\nexport const importProxyWorker = async(): Promise<[undefined | string, Worker]> => {\n  if (!scriptSrc) {\n    throw new Error('Failed to load proxy worker: cannot determine the script source URL.');\n  }\n\n  // If the script source is from the same origin, we can use the embedded proxy module directly.\n  if (isSameOrigin(scriptSrc)) {\n    return [undefined, createProxyWorker!()];\n  }\n\n  // Otherwise, need to preload\n  const url = await preload(scriptSrc);\n  return [url, createProxyWorker!(url)];\n};\n\n/**\n * The embedded WebAssembly module.\n *\n * This is only available in ESM and when embedding is not disabled.\n */\nconst embeddedWasmModule: EmscriptenModuleFactory<OrtWasmModule>|undefined =\n    BUILD_DEFS.IS_ESM && BUILD_DEFS.DISABLE_DYNAMIC_IMPORT ?\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    require(\n        !BUILD_DEFS.DISABLE_TRAINING ? '../../dist/ort-training-wasm-simd-threaded.mjs' :\n            !BUILD_DEFS.DISABLE_JSEP ? '../../dist/ort-wasm-simd-threaded.jsep.mjs' :\n                                       '../../dist/ort-wasm-simd-threaded.mjs')\n        .default :\n    undefined;\n\n/**\n * Import the WebAssembly module.\n *\n * This function will perform the following steps:\n * 1. If BUILD_DEFS.DISABLE_DYNAMIC_IMPORT is true, use the embedded module.\n * 2. If a preload is needed, it will preload the module and return the object URL.\n * 3. Otherwise, it will perform a dynamic import of the module.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The default export of the module, which is a factory function to create the WebAssembly module.\n */\nexport const importWasmModule = async(\n    urlOverride: string|undefined, prefixOverride: string|undefined,\n    isMultiThreaded: boolean): Promise<[undefined | string, EmscriptenModuleFactory<OrtWasmModule>]> => {\n  if (BUILD_DEFS.DISABLE_DYNAMIC_IMPORT) {\n    return [undefined, embeddedWasmModule!];\n  } else {\n    const wasmModuleFilename = !BUILD_DEFS.DISABLE_TRAINING ? 'ort-training-wasm-simd-threaded.mjs' :\n        !BUILD_DEFS.DISABLE_JSEP                            ? 'ort-wasm-simd-threaded.jsep.mjs' :\n                                                              'ort-wasm-simd-threaded.mjs';\n    const wasmModuleUrl = urlOverride ?? normalizeUrl(wasmModuleFilename, prefixOverride);\n    // need to preload if all of the following conditions are met:\n    // 1. not in Node.js.\n    //    - Node.js does not have the same origin policy for creating workers.\n    // 2. multi-threaded is enabled.\n    //    - If multi-threaded is disabled, no worker will be created. So we don't need to preload the module.\n    // 3. the absolute URL is available.\n    //    - If the absolute URL is failed to be created, the origin cannot be determined. In this case, we will not\n    //    preload the module.\n    // 4. the worker URL is not from the same origin.\n    //    - If the worker URL is from the same origin, we can create the worker directly.\n    const needPreload = !isNode && isMultiThreaded && wasmModuleUrl && !isSameOrigin(wasmModuleUrl, prefixOverride);\n    const url = needPreload ? (await preload(wasmModuleUrl)) :\n                              (wasmModuleUrl ?? fallbackUrl(wasmModuleFilename, prefixOverride));\n    return [needPreload ? url : undefined, await dynamicImportDefault<EmscriptenModuleFactory<OrtWasmModule>>(url)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport type {OrtWasmModule} from './wasm-types';\nimport {importWasmModule} from './wasm-utils-import';\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n  if (typeof SharedArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  try {\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  let numThreads = flags.numThreads!;\n\n  // ensure SIMD is supported\n  if (!isSimdSupported()) {\n    throw new Error('WebAssembly SIMD is not supported in the current environment.');\n  }\n\n  // check if multi-threading is supported\n  const multiThreadSupported = isMultiThreadSupported();\n  if (numThreads > 1 && !multiThreadSupported) {\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      // eslint-disable-next-line no-console\n      console.warn(\n          'env.wasm.numThreads is set to ' + numThreads +\n          ', but this will not work unless you enable crossOriginIsolated mode. ' +\n          'See https://web.dev/cross-origin-isolation-guide/ for more info.');\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(\n        'WebAssembly multi-threading is not supported in the current environment. ' +\n        'Falling back to single-threading.');\n\n    // set flags.numThreads to 1 so that OrtInit() will not create a global thread pool.\n    flags.numThreads = numThreads = 1;\n  }\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const mjsPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.mjs;\n  const mjsPathOverride = (mjsPathOverrideFlag as URL)?.href ?? mjsPathOverrideFlag;\n  const wasmPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.wasm;\n  const wasmPathOverride = (wasmPathOverrideFlag as URL)?.href ?? wasmPathOverrideFlag;\n  const wasmBinaryOverride = flags.wasmBinary;\n\n  const [objectUrl, ortWasmFactory] = (await importWasmModule(mjsPathOverride, wasmPrefixOverride, numThreads > 1));\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const config: Partial<OrtWasmModule> = {\n      /**\n       * The number of threads. WebAssembly will create (Module.numThreads - 1) workers. If it is 1, no worker will be\n       * created.\n       */\n      numThreads,\n    };\n\n    if (wasmBinaryOverride) {\n      /**\n       * Set a custom buffer which contains the WebAssembly binary. This will skip the wasm file fetching.\n       */\n      config.wasmBinary = wasmBinaryOverride;\n    } else if (wasmPathOverride || wasmPrefixOverride) {\n      /**\n       * A callback function to locate the WebAssembly file. The function should return the full path of the file.\n       *\n       * Since Emscripten 3.1.58, this function is only called for the .wasm file.\n       */\n      config.locateFile = (fileName, scriptDirectory) =>\n          wasmPathOverride ?? (wasmPrefixOverride ?? scriptDirectory) + fileName;\n    }\n\n    ortWasmFactory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n          }\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    // TODO: currently \"PThread.terminateAllThreads()\" is not exposed in the wasm module.\n    //       And this function is not yet called by any code.\n    //       If it is needed in the future, we should expose it in the wasm module and uncomment the following line.\n\n    // wasm?.PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              // const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n              const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n              if (deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${deviceType}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            if (typeof ep !== 'string') {\n              const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n              if (webgpuOptions?.preferredLayout) {\n                if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n                  throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n                }\n                const keyDataOffset = allocWasmString('preferredLayout', allocs);\n                const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n                }\n              }\n            }\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.enableGraphCapture !== undefined) {\n      if (typeof sessionOptions.enableGraphCapture !== 'boolean') {\n        throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);\n      }\n      const keyDataOffset = allocWasmString('enableGraphCapture', allocs);\n      const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);\n      if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n        checkLastError(\n            `Can't set a session config entry: 'enableGraphCapture' - ${sessionOptions.enableGraphCapture}.`);\n      }\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          // allow Float16Array polyfill.\n          return typeof Float16Array !== 'undefined' && Float16Array.from ? Float16Array : Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes => type === 'float32' ||\n    type === 'float16' || type === 'int32' || type === 'int64' || type === 'uint32' || type === 'uint8' ||\n    type === 'bool';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation|undefined =>\n    (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer'] as const)[location];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {isNode} from './wasm-utils-env';\n\n/**\n * Load a file into a Uint8Array.\n *\n * @param file - the file to load. Can be a URL/path, a Blob, an ArrayBuffer, or a Uint8Array.\n * @returns a Uint8Array containing the file data.\n */\nexport const loadFile = async(file: string|Blob|ArrayBufferLike|Uint8Array): Promise<Uint8Array> => {\n  if (typeof file === 'string') {\n    if (isNode) {\n      // load file into ArrayBuffer in Node.js\n      try {\n        const {readFile} = require('node:fs/promises');\n        return new Uint8Array(await readFile(file));\n      } catch (e) {\n        if (e.code === 'ERR_FS_FILE_TOO_LARGE') {\n          // file is too large, use fs.createReadStream instead\n          const {createReadStream} = require('node:fs');\n          const stream = createReadStream(file);\n          const chunks: Uint8Array[] = [];\n          for await (const chunk of stream) {\n            chunks.push(chunk);\n          }\n          return new Uint8Array(Buffer.concat(chunks));\n        }\n        throw e;\n      }\n    } else {\n      // load file into ArrayBuffer in browsers\n      const response = await fetch(file);\n      if (!response.ok) {\n        throw new Error(`failed to load external data file: ${file}`);\n      }\n      const contentLengthHeader = response.headers.get('Content-Length');\n      const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n      if (fileSize < 1073741824 /* 1GB */) {\n        // when Content-Length header is not set, we cannot determine the file size. We assume it is small enough to\n        // load into memory.\n        return new Uint8Array(await response.arrayBuffer());\n      } else {\n        // file is too large, use stream instead\n        if (!response.body) {\n          throw new Error(`failed to load external data file: ${file}, no response body.`);\n        }\n        const reader = response.body.getReader();\n\n        let buffer;\n        try {\n          // try to create ArrayBuffer directly\n          buffer = new ArrayBuffer(fileSize);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            // use WebAssembly Memory to allocate larger ArrayBuffer\n            const pages = Math.ceil(fileSize / 65536);\n            buffer = new WebAssembly.Memory({initial: pages, maximum: pages}).buffer;\n          } else {\n            throw e;\n          }\n        }\n\n        let offset = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const {done, value} = await reader.read();\n          if (done) {\n            break;\n          }\n          const chunkSize = value.byteLength;\n          const chunk = new Uint8Array(buffer, offset, chunkSize);\n          chunk.set(value);\n          offset += chunkSize;\n        }\n        return new Uint8Array(buffer, 0, fileSize);\n      }\n    }\n\n  } else if (file instanceof Blob) {\n    return new Uint8Array(await file.arrayBuffer());\n  } else if (file instanceof Uint8Array) {\n    return file;\n  } else {\n    return new Uint8Array(file);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"jsep/webnn/webnn.d.ts\" />\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableInternalBuffer, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {dataLocationStringToEnum, getTensorElementSize, isGpuBufferSupportedType, logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\nimport {loadFile} from './wasm-utils-load-file';\n\n// #region Initializations\n\n/**\n * There are 4 different \"initialization\" steps for ORT. They happen in different places and different time.\n *\n * 1. JavaScript initialization for onnxruntime-common and onnxruntime-web.\n *    This is the first initialization step. In this step, onnxruntime-web calls onnxruntime-common's registerBackend()\n * function multiple times to register all the available backends. The backend registration is very fast. It only\n * registers the backend name with the uninitialized backend object. No heavy initialization is done in this step.\n *    Refer to web/lib/index.ts for the backend registration.\n *\n * 2. WebAssembly artifact initialization.\n *    This happens when any registered wasm backend is used for the first time (ie. `ort.InferenceSession.create()` or\n * `ort.TrainingSession.create()` is called). In this step, onnxruntime-web does the followings:\n *     - create a proxy worker and make sure the proxy worker is ready to receive messages, if proxy is enabled.\n *     - perform feature detection, locate correct WebAssembly artifact path and call the Emscripten generated\n * JavaScript code to initialize the WebAssembly runtime.\n *         - if proxy is enabled, this step happens in the proxy worker using message 'init-wasm'.\n *         - downloading the 'ort-wasm{...}.wasm' file is done in this step.\n *         - if multi-thread is enabled, one or more webworker will be created to initialize the PThread threadpool.\n *\n * 3. ORT environment initialization.\n *    This happens after step 2. In this step, onnxruntime-web performs ONNX Runtime environment initialization.\n * Function `_OrtInit()` is called in this step.\n *     - if proxy is enabled, this step happens in the proxy worker using message 'init-ort'.\n *     - logging level (ort.env.logLevel) and thread number (ort.env.wasm.numThreads) are set in this step.\n *\n * 4. Session initialization.\n *    This happens when `ort.InferenceSession.create()` or `ort.TrainingSession.create()` is called. Unlike the first 3\n * steps (they only called once), this step will be done for each session. In this step, onnxruntime-web does the\n * followings:\n *    If the parameter is a URL:\n *    - download the model data from the URL.\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - dereference the model buffer. This step allows the original ArrayBuffer to be garbage collected.\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *    If the parameter is a Uint8Array object:\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *\n */\n\n/**\n * initialize ORT environment.\n *\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * initialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n};\n\n/**\n * perform EP specific initialization.\n *\n * @param env\n * @param epName\n */\nexport const initEp = async(env: Env, epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n\n    if (epName === 'webgpu') {\n      // perform WebGPU availability check\n      if (typeof navigator === 'undefined' || !navigator.gpu) {\n        throw new Error('WebGPU is not supported in current environment');\n      }\n\n      let adapter = env.webgpu.adapter as GPUAdapter | null;\n      if (!adapter) {\n        // if adapter is not set, request a new adapter.\n        const powerPreference = env.webgpu.powerPreference;\n        if (powerPreference !== undefined && powerPreference !== 'low-power' &&\n            powerPreference !== 'high-performance') {\n          throw new Error(`Invalid powerPreference setting: \"${powerPreference}\"`);\n        }\n        const forceFallbackAdapter = env.webgpu.forceFallbackAdapter;\n        if (forceFallbackAdapter !== undefined && typeof forceFallbackAdapter !== 'boolean') {\n          throw new Error(`Invalid forceFallbackAdapter setting: \"${forceFallbackAdapter}\"`);\n        }\n        adapter = await navigator.gpu.requestAdapter({powerPreference, forceFallbackAdapter});\n        if (!adapter) {\n          throw new Error(\n              'Failed to get GPU adapter. ' +\n              'You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.');\n        }\n      } else {\n        // if adapter is set, validate it.\n        if (typeof adapter.limits !== 'object' || typeof adapter.features !== 'object' ||\n            typeof adapter.requestDevice !== 'function') {\n          throw new Error('Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.');\n        }\n      }\n\n      await initJsep('webgpu', getInstance(), env, adapter);\n    }\n    if (epName === 'webnn') {\n      // perform WebNN availability check\n      if (typeof navigator === 'undefined' || !(navigator as unknown as {ml: unknown}).ml) {\n        throw new Error('WebNN is not supported in current environment');\n      }\n\n      await initJsep('webnn', getInstance(), env);\n    }\n  }\n};\n\n// #endregion Initializations\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu'|'cpu-pinned'|'gpu-buffer';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number, inputNamesUTF8Encoded: number[], outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState|null, enableGraphCapture: boolean, inputOutputBound: boolean\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * allocate the memory and memcpy the external buffer.\n *\n * @param model - the external buffer containing the model data. Must not be the same buffer as the WASM heap.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const copyFromExternalBuffer = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session from a model data buffer.\n *\n * @param modelData - either a Uint8Array object representing the model data, or a 2-elements tuple containing the\n *     pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSession = async(\n    modelData: Uint8Array|SerializableInternalBuffer,\n    options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  let modelDataOffset: number, modelDataLength: number;\n  const wasm = getInstance();\n\n  if (Array.isArray(modelData)) {\n    // if model data is an array, it must be a 2-elements tuple containing the pointer and size of the model data\n    [modelDataOffset, modelDataLength] = modelData;\n  } else if (modelData.buffer === wasm.HEAPU8.buffer) {\n    // if model data uses the same buffer as the WASM heap, we don't need to copy it.\n    [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n  } else {\n    // otherwise, copy the model data to the WASM heap.\n    [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n  }\n\n  let sessionHandle = 0;\n  let sessionOptionsHandle = 0;\n  let ioBindingHandle = 0;\n  let allocs: number[] = [];\n  const inputNamesUTF8Encoded = [];\n  const outputNamesUTF8Encoded = [];\n\n  try {\n    [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n    if (options?.externalData && wasm.mountExternalData) {\n      const loadingPromises = [];\n      for (const file of options.externalData) {\n        const path = typeof file === 'string' ? file : file.path;\n        loadingPromises.push(loadFile(typeof file === 'string' ? file : file.data).then(data => {\n          wasm.mountExternalData!(path, data);\n        }));\n      }\n\n      // wait for all external data files to be loaded\n      await Promise.all(loadingPromises);\n    }\n\n    for (const provider of options?.executionProviders ?? []) {\n      const providerName = typeof provider === 'string' ? provider : provider.name;\n      if (providerName === 'webnn') {\n        if (wasm.currentContext) {\n          throw new Error('WebNN execution provider is already set.');\n        }\n        if (typeof provider !== 'string') {\n          const webnnOptions = provider as InferenceSession.WebNNExecutionProviderOption;\n          const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const gpuDevice = (webnnOptions as InferenceSession.WebNNOptionsWebGpu)?.gpuDevice;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          const numThreads = (webnnOptions as InferenceSession.WebNNContextOptions)?.numThreads;\n          const powerPreference = (webnnOptions as InferenceSession.WebNNContextOptions)?.powerPreference;\n          if (context) {\n            wasm.currentContext = context as MLContext;\n          } else if (gpuDevice) {\n            wasm.currentContext = await navigator.ml.createContext(gpuDevice);\n          } else {\n            wasm.currentContext = await navigator.ml.createContext({deviceType, numThreads, powerPreference});\n          }\n        } else {\n          wasm.currentContext = await navigator.ml.createContext();\n        }\n        break;\n      }\n    }\n\n    sessionHandle = await wasm._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n    if (sessionHandle === 0) {\n      checkLastError('Can\\'t create a session.');\n    }\n\n    // clear current MLContext after session creation\n    if (wasm.currentContext) {\n      wasm.currentContext = undefined;\n    }\n\n    const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n    const enableGraphCapture = !!options?.enableGraphCapture;\n\n    const inputNames = [];\n    const outputNames = [];\n    const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError('Can\\'t get an input name.');\n      }\n      inputNamesUTF8Encoded.push(name);\n      inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError('Can\\'t get an output name.');\n      }\n      outputNamesUTF8Encoded.push(name);\n      const nameString = wasm.UTF8ToString(name);\n      outputNames.push(nameString);\n\n      if (!BUILD_DEFS.DISABLE_JSEP) {\n        if (enableGraphCapture && options?.preferredOutputLocation === undefined) {\n          outputPreferredLocations.push('gpu-buffer');\n          continue;\n        }\n        const location = typeof options?.preferredOutputLocation === 'string' ?\n            options.preferredOutputLocation :\n            options?.preferredOutputLocation?.[nameString] ?? 'cpu';\n        if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer') {\n          throw new Error(`Not supported preferred output location: ${location}.`);\n        }\n        if (enableGraphCapture && location !== 'gpu-buffer') {\n          throw new Error(`Not supported preferred output location: ${\n              location}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);\n        }\n        outputPreferredLocations.push(location);\n      }\n    }\n\n    // use IO binding only when at least one output is preffered to be on GPU.\n    let bindingState: IOBindingState|null = null;\n    if (!BUILD_DEFS.DISABLE_JSEP && outputPreferredLocations.some(l => l === 'gpu-buffer')) {\n      ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n      if (ioBindingHandle === 0) {\n        checkLastError('Can\\'t create IO binding.');\n      }\n\n      bindingState = {\n        handle: ioBindingHandle,\n        outputPreferredLocations,\n        outputPreferredLocationsEncoded: outputPreferredLocations.map(l => dataLocationStringToEnum(l)),\n      };\n    }\n\n    activeSessions.set(\n        sessionHandle,\n        [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState, enableGraphCapture, false]);\n    return [sessionHandle, inputNames, outputNames];\n  } catch (e) {\n    inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n    if (ioBindingHandle !== 0) {\n      wasm._OrtReleaseBinding(ioBindingHandle);\n    }\n\n    if (sessionHandle !== 0) {\n      wasm._OrtReleaseSession(sessionHandle);\n    }\n    throw e;\n  } finally {\n    wasm._free(modelDataOffset);\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n\n    // unmount external data if necessary\n    wasm.unmountExternalData?.();\n  }\n};\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;\n\n  if (ioBindingState) {\n    if (enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n    }\n    wasm._OrtReleaseBinding(ioBindingState.handle);\n  }\n\n  wasm.jsepOnReleaseSession?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\nexport const prepareInputOutputTensor =\n    (tensor: TensorMetadata|null, tensorHandles: number[], allocs: number[], sessionId: number, index: number,\n     enableGraphCapture = false): void => {\n      if (!tensor) {\n        tensorHandles.push(0);\n        return;\n      }\n\n      const wasm = getInstance();\n\n      const dataType = tensor[0];\n      const dims = tensor[1];\n      const location = tensor[3];\n\n      let rawData: number;\n      let dataByteLength: number;\n\n      if (dataType === 'string' && location === 'gpu-buffer') {\n        throw new Error('String tensor is not supported on GPU.');\n      }\n\n      if (enableGraphCapture && location !== 'gpu-buffer') {\n        throw new Error(\n            `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`);\n      }\n\n      if (location === 'gpu-buffer') {\n        const gpuBuffer = tensor[2].gpuBuffer as GPUBuffer;\n        const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType))!;\n        dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n\n        const registerBuffer = wasm.jsepRegisterBuffer;\n        if (!registerBuffer) {\n          throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n        }\n        rawData = registerBuffer(sessionId, index, gpuBuffer, dataByteLength);\n      } else {\n        const data = tensor[2];\n\n        if (Array.isArray(data)) {\n          // string tensor\n          dataByteLength = 4 * data.length;\n          rawData = wasm._malloc(dataByteLength);\n          allocs.push(rawData);\n          let dataIndex = rawData / 4;\n          for (let i = 0; i < data.length; i++) {\n            if (typeof data[i] !== 'string') {\n              throw new TypeError(`tensor data at index ${i} is not a string`);\n            }\n            wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n          }\n        } else {\n          dataByteLength = data.byteLength;\n          rawData = wasm._malloc(dataByteLength);\n          allocs.push(rawData);\n          wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n        }\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), rawData, dataByteLength, dimsOffset, dims.length,\n            dataLocationStringToEnum(location));\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n        }\n        tensorHandles.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputTensors: TensorMetadata[], outputIndices: number[],\n    outputTensors: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n  const ioBindingState = session[3];\n  const enableGraphCapture = session[4];\n  const inputOutputBound = session[5];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(\n          inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i], enableGraphCapture);\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n          outputTensors[i], outputTensorHandles, inputOutputAllocs, sessionId, inputCount + outputIndices[i],\n          enableGraphCapture);\n    }\n\n    let inputValuesIndex = inputValuesOffset / 4;\n    let inputNamesIndex = inputNamesOffset / 4;\n    let outputValuesIndex = outputValuesOffset / 4;\n    let outputNamesIndex = outputNamesOffset / 4;\n    for (let i = 0; i < inputCount; i++) {\n      wasm.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n      wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n      wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n    }\n\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState && !inputOutputBound) {\n      const {handle, outputPreferredLocations, outputPreferredLocationsEncoded} = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(`input count from feeds (${\n            inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3];  // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode =\n              wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n      activeSessions.set(\n          sessionId,\n          [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, true]);\n    }\n\n    wasm.jsepOnRunStart?.(sessionHandle);\n    let errorCode: number;\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n          sessionHandle, ioBindingState.handle, outputCount, outputValuesOffset, runOptionsHandle);\n    } else {\n      errorCode = await wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type|undefined, dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n            tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        let tensorDataIndex = tensorDataOffset / 4;\n        const dataType = wasm.HEAPU32[tensorDataIndex++];\n        dataOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n        }\n        wasm._OrtFree(dimsOffset);\n\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.HEAPU32[dataIndex++];\n            const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const getBuffer = wasm.jsepGetBuffer;\n            if (!getBuffer) {\n              throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n            }\n            const gpuBuffer = getBuffer(dataOffset);\n            const elementSize = getTensorElementSize(dataType);\n            if (elementSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type, dims, {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader!(gpuBuffer, size * elementSize, type),\n                dispose: () => {\n                  wasm._OrtReleaseTensor(tensor);\n                }\n              },\n              'gpu-buffer'\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState && !enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n      activeSessions.set(\n          sessionId,\n          [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, false]);\n    }\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableInternalBuffer, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\nimport {importProxyWorker} from './wasm-utils-import';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\nlet temporaryObjectUrl: string|undefined;\n\ntype PromiseCallbacks<T = void> = [resolve: (result: T) => void, reject: (reason: unknown) => void];\nlet initWasmCallbacks: PromiseCallbacks;\nconst queuedCallbacks: Map<OrtWasmMessage['type'], Array<PromiseCallbacks<unknown>>> = new Map();\n\nconst enqueueCallbacks = (type: OrtWasmMessage['type'], callbacks: PromiseCallbacks<unknown>): void => {\n  const queue = queuedCallbacks.get(type);\n  if (queue) {\n    queue.push(callbacks);\n  } else {\n    queuedCallbacks.set(type, [callbacks]);\n  }\n};\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      if (temporaryObjectUrl) {\n        URL.revokeObjectURL(temporaryObjectUrl);\n        temporaryObjectUrl = undefined;\n      }\n      break;\n    case 'init-ep':\n    case 'copy-from':\n    case 'create':\n    case 'release':\n    case 'run':\n    case 'end-profiling': {\n      const callbacks = queuedCallbacks.get(ev.data.type)!;\n      if (ev.data.err) {\n        callbacks.shift()![1](ev.data.err);\n      } else {\n        callbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    }\n    default:\n  }\n};\n\n\nexport const initializeWebAssemblyAndOrtRuntime = async(): Promise<void> => {\n  if (initialized) {\n    return;\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initWasm()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initWasm()\\' failed.');\n  }\n\n  initializing = true;\n\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n\n      void importProxyWorker().then(([objectUrl, worker]) => {\n        try {\n          proxyWorker = worker;\n          proxyWorker.onerror = (ev: ErrorEvent) => reject(ev);\n          proxyWorker.onmessage = onProxyWorkerMessage;\n          initWasmCallbacks = [resolve, reject];\n          const message: OrtWasmMessage = {type: 'init-wasm', in : env};\n          proxyWorker.postMessage(message);\n          temporaryObjectUrl = objectUrl;\n        } catch (e) {\n          reject(e);\n        }\n      }, reject);\n    });\n\n  } else {\n    try {\n      await initializeWebAssembly(env.wasm);\n      await core.initRuntime(env);\n      initialized = true;\n    } catch (e) {\n      aborted = true;\n      throw e;\n    } finally {\n      initializing = false;\n    }\n  }\n};\n\nexport const initializeOrtEp = async(epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('init-ep', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'init-ep', in : {epName, env}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initEp(env, epName);\n  }\n};\n\nexport const copyFromExternalBuffer = async(buffer: Uint8Array): Promise<SerializableInternalBuffer> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableInternalBuffer>((resolve, reject) => {\n      enqueueCallbacks('copy-from', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'copy-from', in : {buffer}};\n      proxyWorker!.postMessage(message, [buffer.buffer]);\n    });\n  } else {\n    return core.copyFromExternalBuffer(buffer);\n  }\n};\n\nexport const createSession =\n    async(model: SerializableInternalBuffer|Uint8Array, options?: InferenceSession.SessionOptions):\n        Promise<SerializableSessionMetadata> => {\n          if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n            // check unsupported options\n            if (options?.preferredOutputLocation) {\n              throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n            }\n            ensureWorker();\n            return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n              enqueueCallbacks('create', [resolve, reject]);\n              const message: OrtWasmMessage = {type: 'create', in : {model, options: {...options}}};\n              const transferable: Transferable[] = [];\n              if (model instanceof Uint8Array) {\n                transferable.push(model.buffer);\n              }\n              proxyWorker!.postMessage(message, transferable);\n            });\n          } else {\n            return core.createSession(model, options);\n          }\n        };\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('release', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: TensorMetadata[], outputIndices: number[],\n    outputs: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some(t => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some(t => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      enqueueCallbacks('run', [resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[];  // every input is on CPU.\n      const message: OrtWasmMessage =\n          {type: 'run', in : {sessionId, inputIndices, inputs: serializableInputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('end-profiling', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, InferenceSessionHandler, SessionHandler, Tensor, TRACE_FUNC_BEGIN, TRACE_FUNC_END} from 'onnxruntime-common';\n\nimport {SerializableInternalBuffer, TensorMetadata} from './proxy-messages';\nimport {copyFromExternalBuffer, createSession, endProfiling, releaseSession, run} from './proxy-wrapper';\nimport {isGpuBufferSupportedType} from './wasm-common';\nimport {isNode} from './wasm-utils-env';\nimport {loadFile} from './wasm-utils-load-file';\n\nexport const encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, {gpuBuffer: tensor.gpuBuffer}, 'gpu-buffer'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nexport const decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const {gpuBuffer, download, dispose} = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, {dataType, dims: tensor[1], download, dispose});\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async fetchModelAndCopyToWasmMemory(path: string): Promise<SerializableInternalBuffer> {\n    // fetch model from url and move to wasm heap.\n    return copyFromExternalBuffer(await loadFile(path));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    TRACE_FUNC_BEGIN();\n    let model: Parameters<typeof createSession>[0];\n\n    if (typeof pathOrBuffer === 'string') {\n      if (isNode) {\n        // node\n        model = await loadFile(pathOrBuffer);\n      } else {\n        // browser\n        // fetch model and copy to wasm heap.\n        model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);\n      }\n    } else {\n      model = pathOrBuffer;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n    TRACE_FUNC_END();\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor|null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs =\n        inputArray.map((t, i) => encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`));\n    const outputs = outputArray.map(\n        (t, i) => t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null);\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    TRACE_FUNC_END();\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, InferenceSessionHandler} from 'onnxruntime-common';\n\nimport {initializeOrtEp, initializeWebAssemblyAndOrtRuntime} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler-inference';\nimport {scriptSrc} from './wasm/wasm-utils-import';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (env.wasm.simd === false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n        'Deprecated property \"env.wasm.simd\" is set to false. ' +\n        'non-SIMD build is no longer provided, and this setting will be ignored.');\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.trace !== 'boolean') {\n    env.wasm.trace = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    // The following logic only applies when `ort.env.wasm.numThreads` is not set by user. We will always honor user's\n    // setting if it is provided.\n\n    // Browser: when crossOriginIsolated is false, SharedArrayBuffer is not available so WebAssembly threads will not\n    // work. In this case, we will set numThreads to 1.\n    //\n    // There is an exception: when the browser is configured to force-enable SharedArrayBuffer (e.g. Chromuim with\n    // --enable-features=SharedArrayBuffer), it is possible that `self.crossOriginIsolated` is false and\n    // SharedArrayBuffer is available at the same time. This is usually for testing. In this case,  we will still set\n    // numThreads to 1 here. If we want to enable multi-threading in test, we should set `ort.env.wasm.numThreads` to a\n    // value greater than 1.\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      env.wasm.numThreads = 1;\n    } else {\n      const numCpuLogicalCores =\n          typeof navigator === 'undefined' ? require('node:os').cpus().length : navigator.hardwareConcurrency;\n      env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n    }\n  }\n\n  if (!BUILD_DEFS.DISABLE_DYNAMIC_IMPORT) {\n    // overwrite wasm paths override if not set\n    if (env.wasm.wasmPaths === undefined && scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n      env.wasm.wasmPaths = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n    }\n  }\n};\n\nexport class OnnxruntimeWebAssemblyBackend implements Backend {\n  /**\n   * This function initializes the WebAssembly backend.\n   *\n   * This function will be called only once for each backend name. It will be called the first time when\n   * `ort.InferenceSession.create()` is called with a registered backend name.\n   *\n   * @param backendName - the registered backend name.\n   */\n  async init(backendName: string): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyAndOrtRuntime();\n\n    // performe EP specific initialization\n    await initializeOrtEp(backendName);\n  }\n  createInferenceSessionHandler(path: string, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OnnxruntimeWebAssemblyBackend} from './backend-wasm';\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow bundler to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow bundler remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport * as ort from 'onnxruntime-common';\nexport default ort;\n\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = BUILD_DEFS.DISABLE_TRAINING ? require('./backend-wasm-inference').wasmBackend :\n                                                    require('./backend-wasm-training').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    registerBackend('webgpu', wasmBackend, 5);\n    registerBackend('webnn', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n}\n\nObject.defineProperty(env.versions, 'web', {value: version, enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.19.0';\n"],"names":["an","$e","nr","Xd","sn","un","O","Map","registerBackend","i","e","o","init","createInferenceSessionHandler","TypeError","t","get","set","backend","priority","Error","r","indexOf","splice","n","length","push","async","initialized","aborted","error","initPromise","executionProviders","map","u","name","s","Set","l","err","add","join","includes","console","warn","a","filter","has","Proxy","Reflect","Qa","ts","es","rs","Rt","Bo","wasm","webgl","webgpu","versions","common","logLevel","Object","defineProperty","enumerable","z","ns","os","is","as","tensorToDataURL","document","createElement","OffscreenCanvas","width","dims","height","getContext","tensorLayout","format","norm","mean","bias","f","p","d","y","w","v","S","L","data","A","P","M","fillStyle","fillRect","toDataURL","tensorToImageData","createImageData","V","Fo","ss","us","ls","fs","cs","ln","bufferToTensor","tensorFormat","Float32Array","Lt","HTMLImageElement","ImageData","ImageBitmap","createCanvas","HTMLCanvasElement","resizedHeight","resizedWidth","drawImage","getImageData","Promise","Image","crossOrigin","src","onload","putImageData","tensorFromTexture","download","dispose","location","type","texture","tensorFromGpuBuffer","dataType","gpuBuffer","tensorFromPinnedBuffer","ke","Sr","ps","ds","hs","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","checkTypedArray","BigInt64Array","from","BigUint64Array","Float16Array","ms","bs","gs","Number","isSafeInteger","RangeError","tensorReshape","constructor","this","dataLocation","cpuData","gpuTextureData","downloader","disposer","gpuBufferData","Array","isArray","BigInt","size","fromImage","fromTexture","fromGpuBuffer","fromPinnedBuffer","toImageData","ensureValid","getData","isDownloading","reshape","Tt","fn","ys","xs","Be","Fe","Co","TRACE","trace","timeStamp","TRACE_FUNC","stack","split","trim","cn","Ts","handler","run","outputNames","getOwnPropertyNames","inputNames","hasOwnProperty","call","release","create","ArrayBuffer","SharedArrayBuffer","byteLength","startProfiling","endProfiling","Kd","ws","vs","Is","_s","Os","Jd","pn","Ss","hasOptimizerModel","hasEvalModel","trainingInputNames","trainingOutputNames","evalInputNames","evalOutputNames","evalModel","optimizerModel","createTrainingSessionHandler","checkpointState","trainModel","typeNarrowingForRunStep","convertHandlerReturnTypeToMapOfTensors","lazyResetGrad","runTrainStep","runOptimizerStep","runEvalStep","getParametersSize","arguments","undefined","loadParametersBuffer","getContiguousParameters","Yd","As","No","Or","InferenceSession","TRACE_FUNC_BEGIN","TRACE_FUNC_END","Tensor","TrainingSession","env","Kt","Ie","Qd","dn","verbose","bind","info","warning","fatal","Ar","Es","minimalSeverity","logDateTime","Date","toISOString","logSourceLocation","Zd","provider","log","Ro","Go","Ds","tt","mn","bn","gn","hn","Mt","color","none","reset","setWithEnv","category","startTime","endCallback","timer","ctx","end","checkTimer","endTimer","waitForQueryAndGetTime","endTime","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","start","_timingEvents","_flushTime","stop","logOneEvent","event","begin","then","flush","endSync","beginTimer","toFixed","started","performance","now","Ls","opType","domain","th","version","opImpl","opInit","endsWith","parseInt","substring","isNaN","$s","ks","mt","Mo","__esModule","eh","value","EMPTY","isGuid","toString","validator","test","gen","createEmpty","parse","raw","Math","random","prototype","equals","isEmpty","toJSON","RegExp","Guid","rt","low","high","unsigned","Pt","__isLong__","Bs","clz32","Ce","Cs","J","Fs","Vt","he","Jt","Ms","zs","Rs","Ft","Vs","neg","ir","Vo","yn","min","mul","Yt","Ut","Ns","rh","Gs","or","Us","Uo","D","me","zo","WebAssembly","Instance","Module","exports","isLong","fromInt","fromNumber","fromBits","pow","fromString","fromValue","ZERO","UZERO","ONE","UONE","NEG_ONE","MAX_VALUE","MAX_UNSIGNED_VALUE","MIN_VALUE","toInt","toNumber","isZero","isNegative","eq","div","sub","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","negate","not","subtract","multiply","get_high","divide","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","ceil","LN2","modulo","rem_u","rem_s","mod","rem","countLeadingZeros","clz","countTrailingZeros","ctz","and","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","T","xn","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","buffer","float64","isLittleEndian","Long","toFloat64","Builder","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","growByteBuffer","pad","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","notNested","setPosition","startObject","endObject","readInt16","finish","charCodeAt","finishSizePrefixed","requiredField","readInt32","startVector","endVector","createString","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","__union","bb_pos","__string","__indirect","__vector","__vector_len","__has_identifier","F","Pr","AttributeType","UNDEFINED","FLOAT","INT","STRING","TENSOR","GRAPH","FLOATS","INTS","STRINGS","TENSORS","GRAPHS","SPARSE_TENSOR","SPARSE_TENSORS","fbs","experimental","DimensionValueType","UNKNOWN","VALUE","PARAM","C","TensorDataType","UINT8","INT8","UINT16","INT16","INT32","INT64","BOOL","FLOAT16","DOUBLE","UINT32","UINT64","COMPLEX64","COMPLEX128","BFLOAT16","FLOAT8E4M3FN","FLOAT8E4M3FNUZ","FLOAT8E5M2","FLOAT8E5M2FNUZ","NodeType","Primitive","Fused","TypeInfoValue","NONE","tensor_type","sequence_type","map_type","__init","getRootAsShape","getSizePrefixedRootAsShape","dim","Dimension","dimLength","startShape","addDim","createDimVector","startDimVector","endShape","createShape","Shape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","denotation","startDimension","addValue","addDenotation","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","dimValue","dimParam","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","elemType","shape","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","createTensorTypeAndShape","TensorTypeAndShape","getRootAsMapType","getSizePrefixedRootAsMapType","keyType","valueType","TypeInfo","startMapType","addKeyType","addValueType","endMapType","createMapType","MapType","getRootAsSequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","endSequenceType","createSequenceType","SequenceType","EdgeEnd","nodeIndex","srcArgIndex","dstArgIndex","createEdgeEnd","getRootAsNodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","startInputEdgesVector","addOutputEdges","startOutputEdgesVector","endNodeEdge","createNodeEdge","NodeEdge","getRootAsNode","getSizePrefixedRootAsNode","docString","sinceVersion","index","executionProviderType","inputs","inputsLength","outputs","outputsLength","attributes","Attribute","attributesLength","inputArgCounts","inputArgCountsLength","inputArgCountsArray","byteOffset","implicitInputs","implicitInputsLength","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","createInputsVector","startInputsVector","addOutputs","createOutputsVector","startOutputsVector","addAttributes","createAttributesVector","startAttributesVector","addInputArgCounts","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","Node","getRootAsValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","endValueInfo","createValueInfo","ValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","OperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","startTensor","addDims","createDimsVector","startDimsVector","addDataType","addRawData","createRawDataVector","startRawDataVector","addStringData","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","getSizePrefixedRootAsSparseTensor","values","indices","startSparseTensor","addValues","addIndices","endSparseTensor","createSparseTensor","SparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","g","Graph","floats","floatsLength","floatsArray","ints","intsLength","strings","stringsLength","tensors","tensorsLength","graphs","graphsLength","startAttribute","addF","addI","addS","addT","addG","addFloats","createFloatsVector","startFloatsVector","addInts","createIntsVector","startIntsVector","addStrings","createStringsVector","startStringsVector","addTensors","createTensorsVector","startTensorsVector","addGraphs","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","initializers","initializersLength","nodeArgs","nodeArgsLength","nodes","nodesLength","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","createInitializersVector","startInitializersVector","addNodeArgs","createNodeArgsVector","startNodeArgsVector","addNodes","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","irVersion","opsetImport","opsetImportLength","producerName","producerVersion","modelVersion","graph","graphDocString","startModel","addIrVersion","addOpsetImport","createOpsetImportVector","startOpsetImportVector","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","createModel","Model","getRootAsKernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","KernelCreateInfos","getRootAsSubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","createSubGraphSessionState","SubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","addSubGraphSessionStates","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getRootAsInferenceSession","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","model","startInferenceSession","addOrtVersion","addModel","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","Hs","Uy","Ws","apply","Ks","Xs","Tn","charAt","Zt","ar","js","encode","slice","qs","decode","Ys","zy","Js","wn","_listeners","on","off","emit","ou","Wy","nu","Zs","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","round","NaN","Qs","tu","eu","ru","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","iu","module","inquire","moduleName","eval","replace","keys","su","au","Wo","read","write","lu","qy","uu","cu","jy","fu","wt","Er","Oe","lo","hi","Ne","zero","zzEncode","zzDecode","ih","zeroHash","isString","toLong","_e","fromHash","toHash","Ho","N","pu","du","captureStackTrace","writable","configurable","message","asPromise","base64","EventEmitter","float","utf8","pool","LongBits","isNode","global","process","node","window","self","emptyArray","freeze","emptyObject","isInteger","isFinite","isObject","isset","isSet","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","merge","lcFirst","toLowerCase","newError","ProtocolError","oneOfGetter","oneOfSetter","toJSONOptions","longs","enums","json","_configure","allocUnsafe","Zo","Ky","gu","X","qo","zt","vn","hu","mu","Dr","len","next","val","Xo","ah","head","tail","states","bu","Ko","Jo","Yo","jo","alloc","_push","uint32","sint32","uint64","int64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","double","uh","string","fork","ldelim","Tu","Jy","xu","se","yu","Se","lh","writeBytesBuffer","copy","ei","Yy","Ou","ct","ti","Qt","Iu","fh","te","pos","buf","wu","_u","isBuffer","Qo","In","vu","_slice","skip","skipType","Eu","Zy","Pu","Re","Au","Su","utf8Slice","Lu","Qy","Du","Lr","ri","rpcImpl","requestDelimited","responseDelimited","rpcCall","setTimeout","ku","$u","Service","Fu","ex","Bu","Ru","Nu","Ct","Cu","util","Writer","BufferWriter","Reader","BufferReader","build","rpc","roots","configure","Mu","nx","Gu","sr","ox","Uu","nt","$","pt","b","h","default","onnx","Version","AttributeProto","sparseTensors","typeProtos","refAttrName","sparseTensor","tp","TensorProto","GraphProto","TypeProto","SparseTensorProto","encodeDelimited","decodeDelimited","verify","fromObject","toObject","arrays","defaults","getTypeUrl","ValueInfoProto","NodeProto","input","output","attribute","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","ModelProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","key","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","sparseInitializer","valueInfo","quantizationAnnotation","floatData","int32Data","int64Data","externalData","doubleData","uint64Data","segment","Segment","DataLocation","DataType","TensorShapeProto","oneofs","tensorType","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","ur","kr","TextDecoder","ot","Ge","ni","$t","_n","_t","Nt","B","$r","Me","Ue","Ve","Y","rr","ze","arraysEqual","preprocessInputShapes","postprocessOutputShape","pop","calcMatMulShape","calcShape","fillIndex","calc","areEqual","bt","isValidBroadcast","getBroadcastDims","unshift","getShapeOfGemmResult","tensorDataTypeFromProto","tensorDataTypeStringToEnum","tensorDimsFromProto","tensorValueTypeFromProto","tensorDimsFromORTFormat","longToNumber","tensorAttributesFromORTFormat","getSizeFromDimensionRange","sizeFromDimension","sizeToDimension","computeStrides","transpose","reverse","indicesToOffset","offsetToIndices","normalizeAxis","normalizeAxes","incrementIndex","calculateReshapedDims","sortBasedOnPerm","padShape","every","validateDimsAndCalcSize","flattenShape","reduce","squeezeShape","unsqueezeShape","fill","splitShape","determineSplit","adjustPoolAttributes","adjustPadsBasedOnAutoPad","adjustPadAndReturnShape","computePoolOutputShape","computeShapeHelper","computeConvOutputShape","ph","Vu","H","dh","Hu","ii","oi","zu","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","Wu","dataProvider","asyncDataProvider","cache","dataId","integerData","numberData","strides","_strides","fromProto","forEach","DataView","fromData","fromOrtTensor","G","hh","mh","qu","varyingVertex","ju","varyingFrag","outputDeclaration","Xu","st","texture2D","j","ai","tryFn","On","toUpperCase","Ku","lr","JSON","stringify","fr","kt","ee","ue","bh","cr","We","yh","xh","Th","Ju","gh","Yu","Zu","inputTypes","createPackProgramInfo","session","glContext","hasMain","textureType","shaderSource","createPackProgramInfoLoader","si","tl","Ih","_h","wh","vh","Qu","el","cacheHint","createPackedReshape3DProgramInfo","createPackedReshape3DProgramInfoLoader","ui","rl","encodeAsUint8","tensor","executeProgram","Sh","nl","Oh","ol","il","createUnpackProgramInfo","createUnpackProgramInfoLoader","Sn","Br","An","Fr","internalFormat","R32F","RED","channelSize","RGBA32F","RGBA","ALPHA","UNSIGNED_BYTE","Cr","al","li","sl","createTextureLayoutFromTextureType","isPacked","reverseWH","breakAxis","calculateTextureWidthAndHeight","computeTextureWH","channels","unpackedShape","reversedWH","Ph","Pn","ll","getProgramInfoUniqueKey","packedTextureDataCache","unpackedTextureDataCache","layoutStrategy","getOrCreateTextureData","programManager","getArtifact","programInfo","createTextureData","setArtifact","runProgram","getTextureData","pack","unpack","createTextureDataFromLayoutBindTensor","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","reshapePacked","cast","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","fi","W","vt","assign","cacheKey","sort","fl","cl","pl","Eh","Dh","dl","batchNormalization","getFloat","getInt","epsilon","momentum","spatial","createBatchNormalizationProgramInfo","En","Wt","k","Nr","Dn","be","inputTextureLayouts","outputTextureLayout","context","routineBody","dependencies","addDependency","returnOrderedNodes","createOrderedNodes","dfsTraverse","delete","$h","body","kh","Bh","Fh","Ch","Nh","Rh","Gh","Mh","Uh","Vh","Wh","zh","Ht","Hh","hl","ml","bl","gl","yl","xl","Tl","wl","vl","Il","_l","Ol","Sl","equal","greater","less","pRelu","Al","Pl","jh","El","Xh","Kh","Dl","Ln","Ll","createPackedConcatProgramMetadata","createPackedConcatProgramInfo","ut","xt","createPackedConcatProgramInfoLoader","axis","getShiftedChannelsSnippet","$l","Jh","Yh","Zh","kl","Qh","tm","em","Bl","rm","Fl","concat","createUnpackedConcatProgramMetadata","createUnpackedConcatProgramInfo","createUnpackedConcatProgramInfoLoader","getFetchDataFromCorrectTextureMethod","nm","qt","om","im","am","sm","um","lm","fm","cm","ci","pm","dm","hm","mm","bm","gm","pi","di","ym","xm","Tm","wm","dt","Cl","Nl","Rl","Gl","Ml","Ul","vm","Vl","zl","Wl","Hl","ql","jl","mi","Xl","Kl","Jl","Yl","Zl","Ql","tf","ef","rf","nf","of","bi","createElementwiseProgramInfo","createElementwiseProgramInfoLoader","abs","acos","asin","atan","clip","clipV11","generateClipAttributesFromInputs","cos","elu","alpha","exp","identity","leakyRelu","relu","sigmoid","sin","sqrt","tan","tanh","fe","activation","clipMin","clipMax","activationFunction","applyActivation","pr","He","getString","getFloats","activationCacheKey","_m","Om","af","sf","$n","createUnpackedGroupedConvProgramMetadata","createUnpackedGroupedConvProgramInfo","group","autoPad","dilations","kernelShape","pads","dr","createUnpackedGroupedConvProgramInfoLoader","Sm","Am","uf","lf","createPackedIm2ColProgramInfo","createPackedIm2ColProgramInfoLoader","Em","yi","gi","Pm","ff","cf","Dm","kn","xi","matMul","Bn","createMatmulProgramMetadata","km","Bm","Fm","Lm","$m","createPackedMatmulProgramMetadata","createPackedMatmulProgramInfo","Et","createPackedMatmulProgramInfoLoader","pf","df","conv2DPacked","Cm","Nm","hf","Ti","wi","createIm2ColProgramInfo","createIm2ColProgramInfoLoader","Rm","Gm","mf","bf","createDotProductProgramMetadata","createDotProductProgramInfo","createDotProductProgramInfoLoader","vi","Mm","Um","Vm","zm","Ii","Wm","calculateOutputShape","conv","conv2d","conv2DUnpackedPointwise","conv2DUnpacked","getAdjustedConvAttributes","getInts","validateInputs","Hm","qm","jm","gf","Xm","Km","Jm","Ym","Zm","Qm","yf","tb","xf","computeTotalPad","distributePadding","calculateOutputShapeAndPads","convTranspose","convTranspose2d","createConvTransposeProgramMetadata","createUnpackedConvTransposeProgramInfo","outputShape","createUnpackedConvTransposeProgramInfoLoader","convTranspose2DUnpacked","getAdjustedConvTransposeAttributes","outputPadding","Tf","qe","wf","eb","vf","rb","nb","ob","Fn","perm","createTransposeProgramInfo","getAdjustedPerm","getOutputShape","getPermFunctionBody","If","_f","ib","Of","depthToSpace","blocksize","mode","Sf","Af","ab","Pf","flatten","Ae","Rr","Ef","Df","sb","ub","lb","fb","Lf","gather","createGatherProgramInfo","createGatherProgramInfoLoader","_i","$f","kf","Bf","cb","pb","db","Ff","gemm","parseGemmAttributes","transA","transB","beta","isOptionalC","createGemmProgramInfoLoader","createGemmProgramInfo","variables","Cf","Nf","hb","mb","gb","yb","Rf","imageScaler","scale","createImageScalerProgramInfo","arrayLength","createImageScalerProgramInfoLoader","Mf","Uf","Gf","xb","Tb","wb","vb","Ib","_b","Vf","instanceNormalization","createMeanAndVarianceProgramInfo","createComputeOutputProgramInfo","createComputeOutputProgramInfoLoader","Ob","Hf","Sb","zf","Wf","Ab","qf","lrn","Pb","Oi","jf","Xf","Kf","Eb","Db","Lb","$b","kb","Bb","Fb","Cb","Jf","padV2","padV11","generatePadAttributesFromInputs","createPadProgramInfo","getPadFunction","getPadConstant","getPadReflect","getPadEdge","Zf","Qf","tc","ec","rc","nc","oc","ic","ac","Nb","Yf","sc","Nn","uc","Cn","Rb","lc","averagePool","ceilMode","countIncludePad","createAveragePoolProgramInfo","globalAveragePool","maxPool","storageOrder","createMaxPoolProgramInfo","getAdjustedPoolAttributesAndOutputShape","globalMaxPool","generatePoolingCode","copyArray","je","Pe","Gb","Mb","fc","cc","pc","dc","hc","mc","bc","gc","axes","keepDims","createReduceProgramInfo","reduceSum","reduceMean","reduceMax","reduceMin","reduceProd","reduceLogSum","reduceLogSumSquare","yc","xc","Tc","Si","wc","vc","Gr","Ub","Ai","Rn","Pi","upsample","parseUpsampleAttributes","opset","isResize","scales","extrapolationValue","coordinateTransformMode","useExtrapolation","needRoiInput","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","createUpsampleProgramInfo","scalesValidation","Ei","Di","Ic","_c","Vb","zb","Wb","Hb","Oc","resize","createPackedResizeProgramInfo","prepareInputs","parseScalesData","parseScalesDataFromOutputSize","Sc","qb","Ac","Li","Pc","Ec","Dc","jb","Lc","Xb","Kb","$c","starts","ends","createSliceProgramInfo","sliceV10","generateSliceAttributesFromInputs","some","kc","Bc","Fc","Cc","Nc","Rc","Gc","Mc","Jb","Yb","Zb","Uc","Vc","softmax","softmaxV13","computeSoftmax","createComputeMaxProgramInfo","createComputScaleProgramInfo","createSoftMaxProgramInfo","zc","Wc","Hc","Qb","tg","eg","qc","numOutputs","getProgramCount","createSplitProgramInfo","$i","jc","Xc","rg","ng","Kc","squeeze","squeezeV13","Jc","og","ig","Yc","sum","createSumProgramInfo","Zc","ag","sg","Qc","tile","createTileProgramInfo","ki","ep","ug","lg","rp","unsqueeze","unsqueezeV13","np","op","ap","ip","exec","params","fg","sp","hr","cg","newShape","keptDims","pg","dg","up","Gn","Bi","maxTextureSize","computeTexture","Mn","lp","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","getPackedSamplerFromInput","getUnpackedSamplerFromInput","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","It","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","getValueFromSingle","getPackedValueFrom","Un","fp","encodeFloat32","decodeFloat32","encodeUint8","decodeUint8","Vn","cp","setFragColor","getColorAsFloat","zn","pp","bcastIndex","bcastMatmulIndex","incrementIndices","indexToOffsetSingle","offsetToIndicesSingle","Wn","dp","binaryVecFunctions","copyVec","setVecItem","getVecItem","Fi","hp","encoding","fragcolor","vec","shapeUtils","coordinates","Hn","mp","libs","glslLibRoutineDependencyGraph","preprocess","getUniforms","getImports","selectGlslLibRoutinesToBeIncluded","qn","bp","profiler","textureLayoutStrategy","repo","attributesBound","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","draw","vertexShader","deleteShader","deleteProgram","compile","getUniformLocations","getAttribLocations","compileShader","VERTEX_SHADER","debug","FRAGMENT_SHADER","createProgram","attachFramebuffer","textureCoord","setVertexAttributes","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","bindTextureToUniform","getAttribLocation","getUniformLocation","jn","gp","config","pendingRead","reuseTextures","inUseTextures","idleTextures","textureLookup","toEncoderType","getEncoder","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","deleteTexture","Xn","yp","textureCacheMode","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","getValues","addInitializer","resolve","impl","hg","Mr","xp","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","bufferData","STATIC_DRAW","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","enable","BLEND","POINTS","disable","createQuery","beginQuery","TIME_ELAPSED_EXT","endQuery","isTimerResultAvailable","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","QUERY_RESULT","deleteQuery","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","isFencePassed","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","query","addItemToPoll","pollItems","isDoneFn","resolveFn","Ci","mr","webgl2","Tp","bg","mg","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","wp","Kn","vp","contextId","matmulMaxBatchSize","initialize","createSessionHandler","Ni","Ip","yg","gg","xg","_p","Ri","Jn","Op","getNodes","_ops","_starter","_values","getInputIndices","execute","to","getOutputIndices","q","jt","Ur","Sp","_attributes","getValue","getType","getTensor","getStrings","getTensors","getValueNoCheck","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","Mi","Yn","Ui","ce","Zn","Gi","Ap","_from","_to","executeNode","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","deleteNode","isActivation","Pp","Tg","Qn","Ep","load","loadFromOnnxFormat","loadFromOrtFormat","_opsets","_graph","opsets","Dp","_initialized","backendHint","graphInputTypes","graphInputDims","_model","loadModel","sessionHandler","fetch","arrayBuffer","isView","initializeOps","_executionPlan","normalizeAndValidateInputs","createOutput","validateInputTensorDims","validateInputTensorTypes","compareTensorDims","eo","Lp","$p","onnxjsBackend","wg","Vi","kp","ro","Cp","vg","Bp","Fp","Np","zi","Xe","Vr","globalThis","onmessage","in","no","oo","postMessage","epName","io","zr","out","options","ao","so","sessionId","inputIndices","outputIndices","uo","fo","Worker","br","Gp","Ig","Wi","Rp","Mp","import","re","ye","Z","xe","oe","c","m","importScripts","mountExternalData","Ua","unmountExternalData","Memory","initial","maximum","shared","href","currentScript","startsWith","substr","lastIndexOf","XMLHttpRequest","open","responseType","send","response","x","status","onerror","et","cmd","I","E","startWorker","handlers","proxy","_len","R","_key","Za","args","wasmMemory","wasmModule","Eo","pthread_ptr","_o","dd","ia","hd","start_routine","arg","er","en","target","Zr","Wa","_len2","_key2","alert","_len3","_key3","text","instantiateWasm","Kr","onunhandledrejection","reason","wasmBinary","jr","pe","HEAP8","HEAP16","HEAPU8","HEAPU16","HEAP32","HEAPU32","HEAPF32","HEAPF64","HEAP64","HEAPU64","Gt","Xr","Je","Te","Ye","Ee","we","clearInterval","ie","RuntimeError","Ze","Ot","St","de","wr","credentials","ok","catch","instantiate","pd","bd","fa","da","ha","ga","ya","xa","Ta","wa","va","Ia","_a","Oa","U","Sa","Aa","_","gd","yd","xd","Td","wd","vd","Id","_d","Od","K","Sd","Da","La","Ad","Pd","Ed","Dd","Ld","$d","kd","$a","Bd","Fd","Cd","Nd","Rd","Q","Fa","Ca","Io","Na","Ra","Ga","Ma","vo","za","Ud","ta","Ir","wasmOffsetConverter","To","wo","terminate","ea","ve","sa","aa","De","ae","vr","at","$o","Lo","it","At","Ha","rn","ra","na","oa","Do","targetThread","transferList","thread","loaded","threadId","filename","lineno","URL","workerData","ua","Jr","shift","ja","Yr","md","Xa","la","ca","pa","ma","ba","_r","Le","Atomics","store","qa","Oo","Vd","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","getTime","UTC","Qe","Pa","Ea","getSeconds","getMinutes","getHours","getDate","getMonth","getFullYear","getDay","getTimezoneOffset","setTime","getYear","Dt","toLocaleTimeString","hour12","timeZoneName","So","timeOrigin","navigator","hardwareConcurrency","grow","Qr","yt","tr","ka","Ao","Po","Ba","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Gd","Bt","Va","Md","ft","Ya","setDate","setMonth","setFullYear","Ka","Ja","%n","%t","%%","numThreads","all","emscripten_main_runtime_thread_id","locateFile","instantiateStreaming","instance","_OrtInit","_OrtGetLastError","_OrtCreateSessionOptions","_OrtAppendExecutionProvider","_OrtAddFreeDimensionOverride","_OrtAddSessionConfigEntry","_OrtReleaseSessionOptions","_OrtCreateSession","_OrtReleaseSession","_OrtGetInputOutputCount","_OrtGetInputName","_OrtGetOutputName","_OrtFree","_OrtCreateTensor","_OrtGetTensorData","_OrtReleaseTensor","_OrtCreateRunOptions","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_OrtCreateBinding","_OrtBindInput","_OrtBindOutput","_OrtClearBoundOutputs","_OrtReleaseBinding","_OrtRunWithBinding","_OrtRun","_OrtEndProfiling","_malloc","_free","tn","calledRun","___start_em_js","___stop_em_js","stackSave","stackRestore","stackAlloc","UTF8ToString","stringToUTF8","lengthBytesUTF8","_g","Og","Sg","Up","Vp","Ag","zp","origin","isSameOrigin","blob","createObjectURL","Hi","qi","co","Wp","Pg","Eg","isMultiThreadSupported","MessageChannel","port1","validate","isSimdSupported","initTimeout","crossOriginIsolated","wasmPaths","mjs","revokeObjectURL","race","getInstance","Wr","ht","po","allocWasmString","iterateExtraOptions","entries","_ref","Hp","qp","logSeverityLevel","logVerbosityLevel","tag","extra","WeakSet","Dg","Lg","$g","kg","jp","Xp","use_ort_model_bytes_directly","enableMemPattern","setExecutionProviders","deviceType","preferredLayout","graphOptimizationLevel","executionMode","logId","optimizedModelFilePath","enableCpuMemArena","enableProfiling","enableGraphCapture","freeDimensionOverrides","ji","Kp","Xi","Jp","Yp","ho","Zp","Ki","Hr","Ji","headers","getReader","done","Blob","Bg","yr","Fg","Qp","initOrt","path","currentContext","gpuDevice","powerPreference","createContext","handle","jsepOnReleaseSession","jsepRegisterBuffer","jsepOnRunStart","outputPreferredLocations","jsepGetBuffer","jsepCreateDownloader","Ke","Xt","qr","bo","go","mo","Yi","Zi","xr","Tr","Ng","td","ed","rd","nd","od","id","ad","Qi","isProxy","enqueueCallbacks","ensureWorker","_ref2","preferredOutputLocation","sd","Rg","yo","ud","encodeTensorMetadata","fetchModelAndCopyToWasmMemory","Gg","xo","ld","initializeFlags","simd","ko","cpus","fd","wasmBackend","Mg","cd","Ps","bO"],"sourceRoot":""}